{
    "totalRows": 151,
    "data": [
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"On create of neighbourhood-houses-participant entry,send email template 803972 to participant.emailhttps://www.github.com/Kalysys/workflow-configs/blob/main/C:\\\\Users\\\\Bhuwan\\\\Documents\\\\GitHub\\\\workflow-configs\\\\RFSCH\\\\neighbourhood-house-member\\\\generic.js\",\n        \"name\": \"On create of neighbourhood-houses-participant entry,send email template 803972 to participant.email\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{moment,_}=context.utils;const SEND_EMAIL=context.actions['SEND_EMAIL'];var msg,data,e,type,user,role,customer,context=metaData.triggerInputs.triggerEntryDetail;console.log('CurrentMember:',context),console,[{msg,data=null,e=null,type='DEBUG',user=_.get(metaData,'user.email',''),role=metaData.owner,customer=_.get(metaData,'customer.recordValueId','')}]=['email:',context.email],console.log(`[${moment().format('LLLL')}]-[${type}]-[USER: ${user||''}]-[ROLE:${role||''}]-[CUSTOMER: ${customer||''}]-[WORKFLOW]-[${msg||''}]-[${e?e.message:''}]`,data),await SEND_EMAIL({recordId:context.recordId,entryId:context.recordValueId,from:{type:'hard-coded',name:'Rosanna Fire Station Community House',address:'coordinator@rfsch.org.au'},to:[{type:'dynamic',address:'email'}],templateId:803972})}\"\n            }\n        ]\n    }\n]",
            "name": "[RFSCH] On create of neighbourhood-houses-participant entry,send email template 803972 to participant.email",
            "description": "",
            "custom": "false",
            "recordValueId": 804666,
            "createdAt": "2022-09-19T15:40:21.736Z",
            "updatedAt": "2022-10-04T01:07:37.348Z",
            "autoId": "116",
            "autoIdNum": 116,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send task email on create\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"from\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"to\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    }\n]",
            "name": "[5Sticks] - Email Enquirer on create",
            "description": "",
            "custom": "false",
            "recordValueId": 821483,
            "createdAt": "2022-10-04T00:27:17.797Z",
            "updatedAt": "2022-10-04T00:27:17.797Z",
            "autoId": "115",
            "autoIdNum": 115,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send email\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordId; }\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordValueId; }\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"from\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"to\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values\",\n        \"name\": \"Update fields\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordId;}\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordValueId;}\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC SCHEDULED EMAIL AND UPDATE ENTRY/FIELDS] Save email into the emails record",
            "description": "",
            "custom": "false",
            "recordValueId": 818043,
            "createdAt": "2022-09-30T03:10:08.781Z",
            "updatedAt": "2022-09-30T03:31:27.019Z",
            "autoId": "113",
            "autoIdNum": 113,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"UPDATE_ENTRY\",\r\n        \"description\": \"Update Field Values\",\r\n        \"name\": \"Update fields\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordId;}\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordValueId;}\"\r\n            },\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"values\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[GENERIC SCHEDULED UPDATE ENTRY/FIELDS]",
            "description": "",
            "custom": "false",
            "recordValueId": 809666,
            "createdAt": "2022-09-25T01:41:50.275Z",
            "updatedAt": "2022-09-25T01:41:50.275Z",
            "autoId": "112",
            "autoIdNum": 112,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Support Case Entries\",\n        \"name\": \"Get Support Case Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Support Case Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Support Case Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 72911\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Backlog Item\",\n        \"name\": \"Create Backlog Item\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const supportCaseId = context.metaData.triggerInputs.entryId; const subject = context.metaData.triggerInputs.triggerEntryDetail['title']; const description = context.metaData.triggerInputs.triggerEntryDetail['description']; const completionDate = context.metaData.triggerInputs.triggerEntryDetail['expected-completion-date']; return {'11164':JSON.stringify([`${supportCaseId}`]), '9656': subject, '9658': description, '9867': context.utils.moment(completionDate).format('YYYY-MM-DD'), '9858': JSON.stringify([`248068`]), '9791': JSON.stringify([`244632`]), '9695': JSON.stringify([`564921`]), '9784': 0} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"233450\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Status to Assigned to Dev Team\",\n        \"name\": \"Update Status to Assigned to Dev Team\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return {'15319': JSON.stringify(['837576']), '14950': JSON.stringify(['786609'])};}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"72911\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[Clevero] Convert Support Case to Backlog Item",
            "description": "",
            "custom": "true",
            "recordValueId": 790389,
            "createdAt": "2022-09-11T06:15:43.481Z",
            "updatedAt": "2022-10-18T07:18:45.711Z",
            "autoId": "111",
            "autoIdNum": 111,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Quote Entries\",\n        \"name\": \"Get Quote Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Quote Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Quote Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 226908\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Sale from Quote\",\n        \"name\": \"Create Sale from Quote\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const originRecord = context.state.outputs[0][0]; const client = originRecord['customer']; const mainContact = originRecord['main-contact']; const opportunity = originRecord['opportunity']; const customerCurrency = context.metaData.loadedEntries.customerSelect[0] && context.metaData.loadedEntries.customerSelect[0]['default-currency']; let netTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { netTotal += parseFloat(entry.amount); total += parseFloat(entry['gross-amount']); taxTotal += parseFloat(entry.tax); }); return {'12708':JSON.stringify([`${context.metaData.triggerInputs.entryId}`]), '12697': client, '12702': mainContact, '12701': opportunity, '12698': customerCurrency, '12695': netTotal.toFixed(2), '12705': taxTotal.toFixed(2), '12706': total.toFixed(2)} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"592302\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items From Quote\",\n        \"name\": \"Create Subrecord Order Items From Quote\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', account: entry.account || '', rate: parseFloat(entry.rate).toFixed(2), 'gross-amount': parseFloat(entry['gross-amount']).toFixed(2), 'amount': parseFloat(entry.amount).toFixed(2), 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2)  }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"3916\"\n            }\n        ]\n    }\n]",
            "name": "General Consultants - Quote -> Sale",
            "description": "",
            "custom": "false",
            "recordValueId": 592305,
            "createdAt": "2022-04-27T21:34:54.310Z",
            "updatedAt": "2022-08-30T05:58:41.195Z",
            "autoId": "110",
            "autoIdNum": 110,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Set Overdue to true if task's due date > today\",\n        \"name\": \"Set Overdue to true if task's due date > today\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{}=context.utils;const UPDATE_ENTRY=context.actions['UPDATE_ENTRY'];context=metaData.triggerInputs.entry;await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{overdue:!0}})}\"\n            }\n        ]\n    }\n]",
            "name": "[kalysys-config-tasks] Set Tasks Overdue checkbox",
            "description": "",
            "custom": "false",
            "recordValueId": 758190,
            "createdAt": "2022-08-23T02:50:46.696Z",
            "updatedAt": "2022-09-20T17:07:52.967Z",
            "autoId": "109",
            "autoIdNum": 109,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Support Case Entries\",\n        \"name\": \"Get Support Case Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Support Case Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Support Case Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 72911\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Task\",\n        \"name\": \"Create Task\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const supportCaseId = context.metaData.triggerInputs.entryId; const subject = context.metaData.triggerInputs.triggerEntryDetail['title']; const description = context.metaData.triggerInputs.triggerEntryDetail['description']; const completionDate = context.metaData.triggerInputs.triggerEntryDetail['expected-completion-date']; const assignedTo = context.metaData.triggerInputs.triggerEntryDetail['assigned-to']; return {'11086':JSON.stringify([`${supportCaseId}`]), '2806': subject, '2799': description, '2804': JSON.stringify([`27114`]), '2797': JSON.stringify([`27105`]), '2796': context.utils.moment().format('YYYY-MM-DD'), '14081': context.utils.moment().format('YYYY-MM-DD'), '2805': context.utils.moment(completionDate).format('YYYY-MM-DD'), '2798': JSON.stringify([`240993`]), '5484': assignedTo, '14937': JSON.stringify([`778000`])}; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"27103\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Status to Assigned to Operation Team\",\n        \"name\": \"Update Status to Assigned to Operation Team\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return {'15319': JSON.stringify(['837575']), '6862': JSON.stringify(['240993']), '14950': JSON.stringify(['786609'])};}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"72911\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[Clevero] Convert Support Case to Task",
            "description": "",
            "custom": "false",
            "recordValueId": 754044,
            "createdAt": "2022-08-19T03:54:52.316Z",
            "updatedAt": "2022-10-16T05:25:33.009Z",
            "autoId": "108",
            "autoIdNum": 108,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"[XERO] Create/Update Invoices\",\n        \"name\": \"[XERO] Create/Update Invoices\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'],safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}},{GET_ENTRIES,UPDATE_ENTRY,XERO_UPSERT}=context.actions,RECORD_IDS_general_consultants_customers=6629;var context=()=>{try{return metaData.companySettings.xeroOrganisation.xeroId}catch(err){throw console.log('Default xero organisation is not set in company settings'),err}},customerId=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.customer)[0];if(!customerId)throw new Error('Contact not present!');const[currentInvoice]=await GET_ENTRIES({recordId:metaData.triggerInputs.recordId,entryIds:[metaData.triggerInputs.entryId],responseType:'iov',loadSubrecords:!0,subrecordId:3916}),orderItems=currentInvoice.subrecordEntries,[xeroTaxRates,xeroAccounts,xeroCurrencies,xeroBrandingThemes]=await Promise.all([await GET_ENTRIES({recordId:34148,responseType:'iov',fetchAllEntries:!0}),await GET_ENTRIES({recordId:3953,responseType:'iov',fetchAllEntries:!0}),await GET_ENTRIES({recordId:34136,responseType:'iov',fetchAllEntries:!0}),await GET_ENTRIES({recordId:34144,responseType:'iov',fetchAllEntries:!0})]);var[contact]=await GET_ENTRIES({recordId:RECORD_IDS_general_consultants_customers,entryIds:[customerId],responseType:'iov'});let contactInfo;contactInfo=contact['xero-id']?contact:(xeroContactEntryData={contactID:void 0,name:contact.name,emailAddress:contact.email},xeroContactEntryData=(await XERO_UPSERT({recordId:contact.recordId,entryId:contact.recordValueId,xeroTenantId:context(),xeroDetails:{correspondingRecordType:'contact'},xeroEntryData:xeroContactEntryData})).data.xero.contacts[0],[contact]=(await UPDATE_ENTRY({recordId:contact.recordId,entryId:contact.recordValueId,mapInternalIdToFieldId:!0,values:{'xero-id':xeroContactEntryData.contactID,'xero-updated-date-utc':new Date(xeroContactEntryData.updatedDateUTC).toISOString()}}),console.log('Success after contact sync!'),await GET_ENTRIES({recordId:RECORD_IDS_general_consultants_customers,entryIds:[customerId],responseType:'iov'})),contact);const lineAmountTypes=metaData.loadedEntries['xero-line-amount-types'],xeroInvoiceStatusCodes=metaData.loadedEntries['xero-invoice-status-codes'];var xeroContactEntryData=lineAmountTypes.find(lt=>lt.recordValueId===+safeJSONParse(currentInvoice['line-amount-types'])[0])||{},customerId=xeroCurrencies.find(c=>c.recordValueId===+safeJSONParse(currentInvoice.currency)[0])||{},contact=xeroInvoiceStatusCodes.find(s=>s.recordValueId===+safeJSONParse(currentInvoice.status)[0])||{},brandingThemeID=(xeroBrandingThemes.find(b=>b.recordValueId===+safeJSONParse(currentInvoice['branding-theme-id'])[0])||{})['xero-id'],customerId=customerId.code,xeroContactEntryData={invoiceNumber:currentInvoice['invoice-number'],invoiceID:void 0,type:'ACCREC',contact:{contactID:contactInfo['xero-id']},dueDate:moment(currentInvoice['due-date']||void 0).format('YYYY-MM-DD'),date:moment(currentInvoice.date||void 0).format('YYYY-MM-DD'),lineAmountTypes:xeroContactEntryData.value||'Inclusive',currencyCode:customerId||'AUD',status:contact.value||'AUTHORISED',lineItems:await Promise.all(orderItems.map(async item=>{var xeroAccountCode=(xeroAccounts.find(acc=>acc.recordValueId===+safeJSONParse(item.account)[0])||{}).code,taxRateCode=(xeroTaxRates.find(tax=>tax.recordValueId===+safeJSONParse(item['tax-rate'])[0])||{})['xero-id'];safeJSONParse(item.item)[0];return{description:item.description,quantity:item.quantity,unitAmount:item.rate,accountCode:xeroAccountCode,taxType:taxRateCode,discountRate:item['discount-percentage'],lineAmount:item.amount}})),reference:currentInvoice.reference,brandingThemeID:brandingThemeID},customerId=(await XERO_UPSERT({recordId:currentInvoice.recordId,entryId:currentInvoice.recordValueId,xeroTenantId:context(),xeroDetails:{correspondingRecordType:'invoice'},xeroEntryData:xeroContactEntryData})).data.xero.invoices[0];await UPDATE_ENTRY({recordId:currentInvoice.recordId,entryId:currentInvoice.recordValueId,mapInternalIdToFieldId:!0,values:{'xero-id':customerId.invoiceID,'xero-updated-date-utc':new Date(customerId.updatedDateUTC).toISOString()}}),console.log('Success after invoice sync!')}\"\n            }\n        ]\n    }\n]",
            "name": "[XERO] Create/Update Invoices",
            "description": "",
            "custom": "false",
            "recordValueId": 734787,
            "createdAt": "2022-08-05T17:32:55.218Z",
            "updatedAt": "2022-08-05T17:52:54.968Z",
            "autoId": "107",
            "autoIdNum": 107,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get entries\",\n        \"name\": \"Get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Invoice Record\",\n        \"name\": \"Create Invoice Record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const saleRecord = context.state.outputs[0][0]; const salesRep = saleRecord['sales-rep']; const customer = saleRecord.customer; const currency = saleRecord.currency; let taxTotal = 0; let subTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { taxTotal += parseFloat(entry.tax); subTotal += parseFloat(entry.amount); total += parseFloat(entry['gross-amount']); }); return { '1308': context.utils.moment().format('YYYY-MM-DD'), '1309': customer || '[]', '1317': salesRep || '[]', '3225': currency || '[]', '3226': JSON.stringify(['34126']), '3499': taxTotal || '', '3498': subTotal || '', '3500': total || '',}; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"3915\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items From Sale\",\n        \"name\": \"Create Subrecord Order Items From Sale\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, item: entry.item || '[]', description: entry.description || '', quantity: entry.quantity, rate: parseFloat(entry.rate).toFixed(2), account: entry.account || '', 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2), amount : parseFloat(entry.amount).toFixed(2), 'gross-amount' : parseFloat(entry['gross-amount']).toFixed(2),} }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"3916\"\n            }\n        ]\n    }\n]",
            "name": "[General Consultants] Convert Sale to Invoice",
            "description": "",
            "custom": "false",
            "recordValueId": 732747,
            "createdAt": "2022-08-04T03:45:38.493Z",
            "updatedAt": "2022-11-16T04:48:46.799Z",
            "autoId": "106",
            "autoIdNum": 106,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get entries\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 578176\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"update entry data\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[TDA Invoice] Get Entry, Update Fields",
            "description": "",
            "custom": "false",
            "recordValueId": 707761,
            "createdAt": "2022-07-20T06:51:08.200Z",
            "updatedAt": "2022-07-20T06:54:57.994Z",
            "autoId": "104",
            "autoIdNum": 104,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create an entry\",\n        \"name\": \"Generic Create Entry\",\n        \"condition\": \"function(context){  return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"createEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"createEntryRecordId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"createEntryFormId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry after it has been created\",\n        \"name\": \"update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": false\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Create Entry, Update Fields",
            "description": "Create an Entry\nUpdate existing Entry",
            "custom": "false",
            "recordValueId": 707649,
            "createdAt": "2022-07-20T06:20:15.578Z",
            "updatedAt": "2022-07-20T06:20:15.578Z",
            "autoId": "103",
            "autoIdNum": 103,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get order-items\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Order Items`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Order Items failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Sale Record\",\n        \"name\": \"Create Sale Record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const opportunityId = context.metaData.triggerInputs.entryId; const opportunityRecord = context.state.outputs[0][0]; const organisationId = opportunityRecord.organisation; const title = opportunityRecord.title; const salesRep = opportunityRecord.sales; detailsId = opportunityRecord.details; mainContactId = opportunityRecord['primary-contact']; let subTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { subTotal += parseFloat(entry.net); total += parseFloat(entry.total); taxTotal += parseFloat(entry.tax); }); return { '9648': salesRep, '10920': title, '9612': JSON.stringify([`${opportunityId}`]), '9610': organisationId, '9636': detailsId, '9685': mainContactId, '9611': context.utils.moment().format('YYYY-MM-DD'), '9623': subTotal.toFixed(2), '9624': taxTotal.toFixed(2), '9625': total.toFixed(2), }; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"227955\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items For Sale\",\n        \"name\": \"Create Subrecord Order Items For Sale\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', rate: parseFloat(entry.rate).toFixed(2), total: parseFloat(entry.total).toFixed(2), net: parseFloat(entry.net).toFixed(2), 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2), 'payment-method':entry['payment-method'] || '[]', 'billing-date-info': entry['billing-date-info'] || '', 'invoice-date': entry['invoice-date'] || '', 'invoice-due-date': entry['invoice-due-date'] || ''  }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"227957\"\n            }\n        ]\n    }\n]",
            "name": "[Clevero] Convert Opportunity to Sale",
            "description": "",
            "custom": "true",
            "recordValueId": 280664,
            "createdAt": "2022-01-14T01:36:23.234Z",
            "updatedAt": "2022-09-22T05:34:09.399Z",
            "autoId": "102",
            "autoIdNum": 102,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"Set Date to now\",\n        \"condition\": \"function(context){return !context.entry['13969'].length > 0).length === 0}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"type\": \"function\",\n                \"value\": \"function(context){ return {'13969': context.utils.moment().toISOString()};}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[TDA] If Date is empty, set to now",
            "description": "Single Action\nUpdate Fields on an Entry\nMust be used with After Add or After Edit",
            "custom": "false",
            "recordValueId": 689123,
            "createdAt": "2022-07-09T06:15:45.670Z",
            "updatedAt": "2022-07-09T06:29:06.466Z",
            "autoId": "101",
            "autoIdNum": 101,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[]",
            "name": "[5Sticks] - Set Task End Time",
            "description": "",
            "custom": "false",
            "recordValueId": 684849,
            "createdAt": "2022-07-06T05:01:43.421Z",
            "updatedAt": "2022-07-06T05:01:43.421Z",
            "autoId": "99",
            "autoIdNum": 99,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[]",
            "name": "[5Sticks] - Set Task Start Time",
            "description": "",
            "custom": "false",
            "recordValueId": 684848,
            "createdAt": "2022-07-06T05:01:38.559Z",
            "updatedAt": "2022-07-06T05:01:38.559Z",
            "autoId": "98",
            "autoIdNum": 98,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"UPDATE_ENTRY\",\r\n        \"description\": \"Update the UUID field AFTER ADD/EDIT\",\r\n        \"name\": \"update the UUID field after entry edit\",\r\n        \"condition\": \"function(context){ if(!context.metaData.triggerInputs.oldValues) {return true;} else { const currentUniqueId = context.metaData.triggerInputs.oldValues.FieldValues.find(v=>+v.fieldId === 13696); if(currentUniqueId && currentUniqueId.value) {return false;} else {return true;}}}\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"recordId\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"entryId\"\r\n            },\r\n            {\r\n                  \"name\": \"values\",\r\n                  \"source\": \"trigger-config\",\r\n                  \"value\": \"values\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[AUDIT WISE GROUP] Generate UUID",
            "description": "Updates UUID field to have an autogenerated value. \nUUID values are used to create unique URLs for eSignatures. ",
            "custom": "true",
            "recordValueId": 674990,
            "createdAt": "2022-06-27T08:15:38.218Z",
            "updatedAt": "2022-07-01T04:34:16.999Z",
            "autoId": "97",
            "autoIdNum": 97,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"Populate subrecord line items from opportunity to quotes subreord if it exists https://www.github.com/Kalysys/workflow-configs/blob/main/Demo%20Account/Opportunity-Quotes/generic.js\",\r\n        \"name\": \"Populate subrecord line items from opportunity to quotes subreord if it exists\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{moment,_}=context.utils;const{GET_ENTRIES,CREATE_BULK_ENTRIES,DELETE_ENTRIES}=context.actions,currentQuote=metaData.triggerInputs.triggerEntryDetail;context=((jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}})(currentQuote.opportunity)[0];if(!context)throw new Error('No opportunity found!');const[quote]=await GET_ENTRIES({recordId:currentQuote.recordId,entryIds:[currentQuote.recordValueId],responseType:'iov',loadSubrecords:!0,subrecordId:463883}),[opportunity]=await GET_ENTRIES({recordId:558991,entryIds:[context],responseType:'iov',loadSubrecords:!0,subrecordId:463883});var data,e,type,user,role,customer,context=opportunity.subrecordEntries.map(entry=>({parent:currentQuote.recordValueId,index:entry.index,rate:entry.rate,net:entry.net,account:entry.account,tax:entry.tax,'tax-rate':entry['tax-rate'],description:entry.description,quantity:entry.quantity,item:entry.item,total:entry.total})),context=(await DELETE_ENTRIES({values:{463883:quote.subrecordEntries.map(s=>s.recordValueId)}}),await CREATE_BULK_ENTRIES({recordId:463883,mapInternalIdToFieldId:!0,values:context}));[{msg:context,data=null,e=null,type='DEBUG',user=_.get(metaData,'user.email',''),role=metaData.owner,customer=_.get(metaData,'customer.recordValueId','')}]=[{msg:'Subrecord creation response',data:context}],console.log(`[${moment().format('LLLL')}]-[${type}]-[USER: ${user||''}]-[ROLE:${role||''}]-[CUSTOMER: ${customer||''}]-[WORKFLOW]-[${context||''}]-[${e?e.message:''}]`,data)}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[TDA] Populate subrecord line items of Quote entry from quotes.opportunity",
            "description": "",
            "custom": "false",
            "recordValueId": 661578,
            "createdAt": "2022-06-17T07:57:17.260Z",
            "updatedAt": "2022-06-23T01:48:42.890Z",
            "autoId": "96",
            "autoIdNum": 96,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Email confirmation to be sent for when a member/participant has booked. https://www.github.com/Kalysys/workflow-configs/blob/main/Neighbourhood%20Houses/Email%20confirmation%20on%20booking/generic.js\",\n        \"name\": \"Booking confirmation email workflow\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{moment,_}=context.utils,idConstants_neighbourhood_house_members=132157,idConstants_neighbourhood_house_courses=148796,idConstants_neighbourhood_house_sessions=132159,idConstants_email=15169,idConstants_relationship=15172;var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}},log=({msg,data=null,e=null,type='DEBUG',user=_.get(metaData,'user.email',''),role=metaData.owner,customer=_.get(metaData,'customer.recordValueId','')})=>{console.log(`[${moment().format('LLLL')}]-[${type}]-[USER: ${user||''}]-[ROLE:${role||''}]-[CUSTOMER: ${customer||''}]-[WORKFLOW]-[${msg||''}]-[${e?e.message:''}]`,data)};const{CREATE_ENTRY,GET_ENTRIES,SEND_EMAIL}=context.actions,triggerConfigInputs=metaData.triggerConfig.inputs||[];var date,attachments,body,context=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.member)[0],[context]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_members,entryIds:[context],responseType:'iov',ignoreLimits:!0}),context=context.email,adminEmail=triggerConfigInputs.find(input=>'adminEmail'===input.name).value,courseMemberEmailTemplateId=triggerConfigInputs.find(input=>'courseMemberEmailTemplate'===input.name).value,sessionMemberEmailTemplateId=triggerConfigInputs.find(input=>'sessionMemberEmailTemplate'===input.name).value,courseAdminEmailTemplateId=triggerConfigInputs.find(input=>'courseAdminEmailTemplate'===input.name).value,sessionAdminEmailTemplateId=triggerConfigInputs.find(input=>'sessionAdminEmailTemplate'===input.name).value,courseId=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.course)[0],safeJSONParse=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.activity)[0];const emailConfig={};if(courseId)courseMemberEmailTemplateId&&context&&(emailConfig.recordId=idConstants_neighbourhood_house_courses,emailConfig.entryId=courseId,emailConfig.memberEmailTemplateId=courseMemberEmailTemplateId,emailConfig.adminEmailTemplateId=courseAdminEmailTemplateId);else{if(!safeJSONParse)return;sessionMemberEmailTemplateId&&context&&(emailConfig.recordId=idConstants_neighbourhood_house_sessions,emailConfig.entryId=safeJSONParse,emailConfig.memberEmailTemplateId=sessionMemberEmailTemplateId,emailConfig.adminEmailTemplateId=sessionAdminEmailTemplateId)}if(emailConfig.adminEmailTemplateId&&adminEmail&&({adminEmailTemplateId:courseId,recordId:courseMemberEmailTemplateId,entryId:courseAdminEmailTemplateId}=emailConfig,log({msg:'NHH Booking Confirmation WF Success - [ADMIN] Email sent success',data:{emailSentTO:(safeJSONParse=await SEND_EMAIL({recordId:courseMemberEmailTemplateId,entryId:courseAdminEmailTemplateId,from:{type:'company-settings',name:'name',address:'email'},to:[{type:'hard-coded',address:adminEmail}],templateId:courseId})).dataPassed.to}}),sessionMemberEmailTemplateId=safeJSONParse.dataPassed,sessionAdminEmailTemplateId=safeJSONParse.response[0],courseMemberEmailTemplateId=sessionMemberEmailTemplateId.from.email,courseAdminEmailTemplateId=sessionMemberEmailTemplateId.to,adminEmail=sessionMemberEmailTemplateId.cc||[],courseId=sessionMemberEmailTemplateId.bcc||[],attachments=sessionMemberEmailTemplateId.attachments||[],body=sessionMemberEmailTemplateId.body,sessionMemberEmailTemplateId=sessionMemberEmailTemplateId.subject,date=(new Date).toISOString(),sessionAdminEmailTemplateId={2866:sessionAdminEmailTemplateId.headers['x-message-id'],2041:courseMemberEmailTemplateId,2040:JSON.stringify(courseAdminEmailTemplateId),2044:JSON.stringify(adminEmail),2045:JSON.stringify(courseId),2867:JSON.stringify(attachments),2043:body,2042:sessionMemberEmailTemplateId,2046:date},courseMemberEmailTemplateId=(await CREATE_ENTRY({values:sessionAdminEmailTemplateId,recordId:idConstants_email})).id,courseAdminEmailTemplateId=safeJSONParse.recordId,adminEmail=metaData.triggerInputs.entryId,courseId=metaData.triggerInputs.recordId,attachments=safeJSONParse.context.recordValueId,body=safeJSONParse.context.recordId,sessionMemberEmailTemplateId={2047:JSON.stringify({linkedEntries:[{recordId:courseId,entryId:adminEmail},{recordId:body,entryId:attachments}],primaryEntry:{recordId:courseAdminEmailTemplateId,entryId:courseMemberEmailTemplateId}})},await CREATE_ENTRY({values:sessionMemberEmailTemplateId,recordId:idConstants_relationship})),emailConfig.memberEmailTemplateId&&context){const{memberEmailTemplateId,recordId,entryId}=emailConfig,emailResponse=await SEND_EMAIL({recordId:recordId,entryId:entryId,from:{type:'company-settings',name:'name',address:'email'},to:[{type:'hard-coded',address:context}],templateId:memberEmailTemplateId}),emailSent=(log({msg:'NHH Booking Confirmation WF Success - [MEMBER] Email sent success',data:{emailSentTO:emailResponse.dataPassed.to}}),emailResponse.dataPassed),emailRes=emailResponse.response[0],from=emailSent.from.email,to=emailSent.to,cc=emailSent.cc||[],bcc=emailSent.bcc||[],attachments=emailSent.attachments||[],body=emailSent.body,subject=emailSent.subject,date=(new Date).toISOString(),messageId=emailRes.headers['x-message-id'],emailEntryValues={2866:messageId,2041:from,2040:JSON.stringify(to),2044:JSON.stringify(cc),2045:JSON.stringify(bcc),2867:JSON.stringify(attachments),2043:body,2042:subject,2046:date},emailEntryResponse=await CREATE_ENTRY({values:emailEntryValues,recordId:idConstants_email}),emailEntryId=emailEntryResponse.id,emailRecordId=emailResponse.recordId,currentEntryId=metaData.triggerInputs.entryId,currentRecordId=metaData.triggerInputs.recordId,entryIdToWhomEmailIsSent=emailResponse.context.recordValueId,recordIdToWhomEmailIsSent=emailResponse.context.recordId,relationshipValues={2047:JSON.stringify({linkedEntries:[{recordId:currentRecordId,entryId:currentEntryId},{recordId:recordIdToWhomEmailIsSent,entryId:entryIdToWhomEmailIsSent}],primaryEntry:{recordId:emailRecordId,entryId:emailEntryId}})};await CREATE_ENTRY({values:relationshipValues,recordId:idConstants_relationship})}}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood Houses - Email confirmation to be sent for when a member/participant has booked.",
            "description": "",
            "custom": "false",
            "recordValueId": 653754,
            "createdAt": "2022-06-10T04:20:04.835Z",
            "updatedAt": "2022-06-10T04:33:58.726Z",
            "autoId": "95",
            "autoIdNum": 95,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get contact entries\",\n        \"name\": \"get contact entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"464250\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const email = context.metaData.triggerInputs.triggerEntryDetail.email; return [{'subject':11824,'type':'text','operator':'equals','value':email}]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values of enquiries\",\n        \"name\": \"Update Field Values of enquiries\",\n        \"condition\": \"function(context){if(context.state.outputs[0].length) {return true;} else {return false;}}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const entries = context.state.outputs[0]; const entry  = entries[0]; return {'12577': JSON.stringify([`${entry.recordValueId}`]), '12373': entry.client || JSON.stringify([]), '12362': context.utils.moment().toISOString(), '12367':JSON.stringify(['578998']), '12371':JSON.stringify(['589983'])  };}\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Contact from Enquiry if no Contact email match found.\",\n        \"name\": \"Create Contact from Enquiry\",\n        \"condition\": \"function(context){if(context.state.outputs[0].length) {return false;} else {return true;}}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const originRecord = context.state.outputs[0][0]; const firstName = originRecord['first-name']; const lastName = originRecord['last-name']; const email = originRecord['email']; const phone = originRecord['phone']; return {'11821': firstName, '11822': lastName, '11824': email, '11825': phone} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"464250\"\n            }\n        ]\n    }\n]",
            "name": "[TDA] Set Contact based on Email",
            "description": "",
            "custom": "false",
            "recordValueId": 594345,
            "createdAt": "2022-04-29T01:41:55.290Z",
            "updatedAt": "2022-07-04T08:28:58.641Z",
            "autoId": "94",
            "autoIdNum": 94,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Convert Enquiry To Lead https://www.github.com/Kalysys/workflow-configs/blob/main/Demo%20Account/Enquiry-Lead/generic.js\",\n        \"name\": \"Convert Enquiry To Lead\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const{GET_ENTRIES,CREATE_ENTRY}=context.actions;context=metaData.triggerInputs.triggerEntryDetail;const[organisationStatuses]=await Promise.all([GET_ENTRIES({recordId:579222,ignoreLimits:!0,responseType:'iov',fetchAllEntries:!0})]),organisationTypes=metaData.loadedEntries['organisation-types'],leadStatuses=metaData.loadedEntries['lead-statuses'];var leadStatus=leadStatuses.find(l=>'contacted'===l.value.toLowerCase()),type=organisationTypes.find(type=>'company'===type.value.toLowerCase()),organisationStatus=organisationStatuses.find(s=>'unqualified'===s.name.toLowerCase()),context={'first-name':context['first-name'],'last-name':context['last-name'],'lead-source':context['enquiry-source'],name:context['company-name'],'date-added':moment().toISOString(),type:type?JSON.stringify([''+type.recordValueId]):JSON.stringify([]),status:organisationStatus?JSON.stringify([''+organisationStatus.recordValueId]):JSON.stringify([])},type=await CREATE_ENTRY({recordId:464166,formId:558944,mapInternalIdToFieldId:!0,values:context});if(!type)throw new Error('Organisation creation failed!');return{createdOrganisationEntry:type,createdLeadEntry:await CREATE_ENTRY({recordId:558972,mapInternalIdToFieldId:!0,values:{status:leadStatus?JSON.stringify([''+leadStatus.recordValueId]):JSON.stringify([]),company:JSON.stringify([''+type.id])}})}}\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] [TDA] Convert Enquiry to Lead",
            "description": "- Converts enquiry to lead",
            "custom": "false",
            "recordValueId": 592219,
            "createdAt": "2022-04-27T11:37:44.929Z",
            "updatedAt": "2022-04-27T12:02:32.391Z",
            "autoId": "93",
            "autoIdNum": 93,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"Generic handler to sum and update actual-hours field in job record from timesheets\",\r\n        \"name\": \"Sum of Timesheets Hours to bill\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'];console.log('metaData :',JSON.stringify(metaData.triggerType));var{}=context.utils;const{GET_ENTRIES,UPDATE_ENTRY}=context.actions;context=((jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}})(metaData.triggerInputs.triggerEntryDetail['job'])[0];if(console.log('currentJobId :',context),!context)throw'No Jobs associated!';const associatedTimesheetEntries=await GET_ENTRIES({recordId:559183,ignoreLimits:!0,responseType:'iov',filter:[{requestType:'i',subject:'job',type:'array',operator:'any_of',value:[''+context]}]}),filteredEntries=(console.log('associatedTimesheetEntries :',associatedTimesheetEntries),'before_delete'===metaData.triggerType?associatedTimesheetEntries.filter(a=>a.recordValueId!==+metaData.triggerInputs.entryId):associatedTimesheetEntries);console.log('filteredEntries :',filteredEntries);var actualhours=filteredEntries.reduce((acc,current)=>acc+ +current['hours-to-bill'],0);console.log('actualhours :',actualhours),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:464412,entryId:context,values:{'actual-hours':actualhours}}),console.log('Success after updating job Actual Hours!')}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[TDA] Calculate Hours to bill",
            "description": "",
            "custom": "false",
            "recordValueId": 592181,
            "createdAt": "2022-04-27T11:03:57.566Z",
            "updatedAt": "2022-04-27T11:13:58.320Z",
            "autoId": "92",
            "autoIdNum": 92,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Purchase Order Entries\",\n        \"name\": \"Get Purchase Order Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Purchase Order Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Purchase Order Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"578181\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Supplier Bill from Purchase Order\",\n        \"name\":\"Create Supplier Bill from Purchase Order\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const originRecord = context.state.outputs[0][0]; const supplier = originRecord['supplier']; let netTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { netTotal += parseFloat(entry.net); total += parseFloat(entry.total); taxTotal += parseFloat(entry.tax); }); return {'12514': supplier, '12689': netTotal.toFixed(2), '12690': taxTotal.toFixed(2), '12519': total.toFixed(2)} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"578184\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items From Sale\",\n        \"name\": \"Create Subrecord Order Items From Sale\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', account: entry.account || '', rate: parseFloat(entry.rate).toFixed(2), total: parseFloat(entry.total).toFixed(2), net: parseFloat(entry.net).toFixed(2), 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2)  }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"463883\"\n            }\n        ]\n    }\n]",
            "name": "[TDA] Convert Purchase Order to Supplier Bill",
            "description": "",
            "custom": "false",
            "recordValueId": 591922,
            "createdAt": "2022-04-27T05:29:12.247Z",
            "updatedAt": "2022-04-27T05:48:33.421Z",
            "autoId": "91",
            "autoIdNum": 91,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Sale Entries\",\n        \"name\": \"Get Sale Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Sale Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Sale Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"578175\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Invoice from Sale\",\n        \"name\": \"Create Invoice from Sale\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const originRecord = context.state.outputs[0][0]; const client = originRecord['client']; const salesRep = originRecord['sales-rep']; const currency = originRecord['currency']; const terms = originRecord['terms']; let netTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { netTotal += parseFloat(entry.net); total += parseFloat(entry.total); taxTotal += parseFloat(entry.tax); }); return {'12472': context.utils.moment().format('YYYY-MM-DD'), '12473': client, '12477': salesRep, '12490': currency, '12474': terms, '12487': JSON.stringify(['34126']), '12486': JSON.stringify(['583328']), '12479': netTotal.toFixed(2), '12480': taxTotal.toFixed(2), '12481': total.toFixed(2)} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"578176\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items From Sale\",\n        \"name\": \"Create Subrecord Order Items From Sale\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', account: entry.account || '', rate: parseFloat(entry.rate).toFixed(2), total: parseFloat(entry.total).toFixed(2), net: parseFloat(entry.net).toFixed(2), 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2)  }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"463883\"\n            }\n        ]\n    }\n]",
            "name": "[TDA] Convert Sale to Invoice",
            "description": "",
            "custom": "false",
            "recordValueId": 591704,
            "createdAt": "2022-04-27T03:22:29.538Z",
            "updatedAt": "2022-05-09T02:56:27.659Z",
            "autoId": "90",
            "autoIdNum": 90,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Quote Entries\",\n        \"name\": \"Get Quote Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Quote Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Quote Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 464033\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Sale from Quote\",\n        \"name\": \"Create Sale from Quote\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const originRecord = context.state.outputs[0][0]; const client = originRecord['client']; const mainContact = originRecord['main-contact']; const opportunity = originRecord['opportunity']; const salesRep = originRecord['sales-rep']; const signedPdf = originRecord['463874-signed-pdf']; let netTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { netTotal += parseFloat(entry.net); total += parseFloat(entry.total); taxTotal += parseFloat(entry.tax); }); return {'12406':JSON.stringify([`${context.metaData.triggerInputs.entryId}`]), '12404': client, '12405': mainContact, '12406': opportunity, '12403': context.utils.moment().format('YYYY-MM-DD'), '13094': JSON.stringify(['643589']), '12407': salesRep, '12412': signedPdf, '12410': netTotal.toFixed(2), '12409': taxTotal.toFixed(2), '12411': total.toFixed(2)} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"578175\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items From Quote\",\n        \"name\": \"Create Subrecord Order Items From Quote\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', account: entry.account || '', rate: parseFloat(entry.rate).toFixed(2), total: parseFloat(entry.total).toFixed(2), net: parseFloat(entry.net).toFixed(2), 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2)  }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"463883\"\n            }\n        ]\n    }\n]",
            "name": "[TDA] Convert Quote to Sale",
            "description": "",
            "custom": "false",
            "recordValueId": 591635,
            "createdAt": "2022-04-27T02:42:36.933Z",
            "updatedAt": "2022-06-23T02:49:28.376Z",
            "autoId": "89",
            "autoIdNum": 89,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Opportunity Entries\",\n        \"name\": \"Get Opportunity Entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Opportunity Entries`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Opportunity Entries failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 558991\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Sale from Opportunity\",\n        \"name\": \"Create Sale from Opportunity\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {const opportunity = context.metaData.triggerInputs.triggerEntryDetail['title']; const originRecord = context.state.outputs[0][0]; const organisation = originRecord.organisation; const mainContact = originRecord['primary-contact']; const salesRep = originRecord['sales-rep']; let netTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { netTotal += parseFloat(entry.net); total += parseFloat(entry.total); taxTotal += parseFloat(entry.tax); }); return {'12406':JSON.stringify([`${context.metaData.triggerInputs.entryId}`]), '12404': organisation, '12405': mainContact, '12407': salesRep, '12403': context.utils.moment().format('YYYY-MM-DD'), '12410': netTotal.toFixed(2), '12409': taxTotal.toFixed(2), '12411': total.toFixed(2)} ; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"578175\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Order Items From Opportunity\",\n        \"name\": \"Create Subrecord Order Items From Opportunity\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', account: entry.account || '', rate: parseFloat(entry.rate).toFixed(2), total: parseFloat(entry.total).toFixed(2), net: parseFloat(entry.net).toFixed(2), 'tax-rate':entry['tax-rate'], tax : parseFloat(entry.tax).toFixed(2)  }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"463883\"\n            }\n        ]\n    }\n]",
            "name": "[TDA] Convert Opportunity to Sale",
            "description": "",
            "custom": "false",
            "recordValueId": 591168,
            "createdAt": "2022-04-26T09:28:09.743Z",
            "updatedAt": "2022-05-31T07:02:34.634Z",
            "autoId": "88",
            "autoIdNum": 88,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GET_ENTRIES\",\r\n        \"description\": \"Get Enquiry Entries\",\r\n        \"name\": \"Get Enquiry Entries\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"successMsg\": \"function(context){return `Successfully Retrieved Enquiry Entries`}\",\r\n        \"errorMsg\": \"function(context){return 'Retrieving Enquiry Entries failed'}\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": 578177\r\n            },\r\n            {\r\n                \"name\": \"ignoreLimits\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": true\r\n            },\r\n            {\r\n                \"name\": \"responseType\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"iov\"\r\n            },\r\n            {\r\n                \"name\": \"entryIds\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Create Organisation from Enquiry\",\r\n        \"name\": \"Create Organisation from Enquiry\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try {const firstName = context.metaData.triggerInputs.triggerEntryDetail['first-name'];const lastName = context.metaData.triggerInputs.triggerEntryDetail['last-name'];const source = context.metaData.triggerInputs.triggerEntryDetail['enquiry-source']; const companyName = context.metaData.triggerInputs.triggerEntryDetail['company-name']; return {'12395':firstName, '12396':lastName, '11811': source, '11802': companyName, '11803': context.utils.moment().toISOString(), '12394': JSON.stringify(['92912'])}; } catch (e){ console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"464166\"\r\n            },\r\n            {\r\n                \"name\": \"formId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"558944\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[TDA] Convert Enquiry to Organisation",
            "description": "",
            "custom": "false",
            "recordValueId": 591145,
            "createdAt": "2022-04-26T07:43:49.126Z",
            "updatedAt": "2022-04-28T07:25:54.591Z",
            "autoId": "87",
            "autoIdNum": 87,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"UPDATE_ENTRY\",\r\n        \"description\": \"Update the UUID field AFTER ADD/EDIT\",\r\n        \"name\": \"update the UUID field after entry edit\",\r\n        \"condition\": \"function(context){ if(!context.metaData.triggerInputs.oldValues) {return true;} else { const currentUniqueId = context.metaData.triggerInputs.oldValues.FieldValues.find(v=>+v.fieldId === 12352); if(currentUniqueId && currentUniqueId.value) {return false;} else {return true;}}}\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"recordId\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"entryId\"\r\n            },\r\n            {\r\n                  \"name\": \"values\",\r\n                  \"source\": \"trigger-config\",\r\n                  \"value\": \"values\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[CUSTOM] Super Health - Generate UUID",
            "description": "Generates UUID on Add/Edit",
            "custom": "false",
            "recordValueId": 578050,
            "createdAt": "2022-04-08T03:07:27.932Z",
            "updatedAt": "2022-04-08T03:07:27.932Z",
            "autoId": "86",
            "autoIdNum": 86,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"Generic handler to calculate the sum of all associated transactions.amount and update grants.amount-used-hrs\",\r\n        \"name\": \"Calculate the sum of Transactions Amount ($)\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'];console.log('metaData :',JSON.stringify(metaData.triggerType));var{}=context.utils;const{GET_ENTRIES,UPDATE_ENTRY}=context.actions;context=((jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}})(metaData.triggerInputs.triggerEntryDetail['grant'])[0];if(console.log('currentTransactionId :',context),!context)throw'No Jobs associated!';const associatedGrantEntries=await GET_ENTRIES({recordId:132358,ignoreLimits:!0,responseType:'iov',filter:[{requestType:'i',subject:'grant',type:'array',operator:'any_of',value:[''+context]}]}),filteredEntries=(console.log('associatedGrantEntries :',associatedGrantEntries),'before_delete'===metaData.triggerType?associatedGrantEntries.filter(a=>a.recordValueId!==+metaData.triggerInputs.entryId):associatedGrantEntries);console.log('filteredEntries :',filteredEntries);var amountUsed=filteredEntries.reduce((acc,current)=>acc+ +current['amount'],0);console.log('amountUsed :',amountUsed),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:150849,entryId:context,values:{'amount-used':amountUsed}}),console.log('Success after updating transactions amount!')}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[CUSTOM] Neighbourhood Houses - Calculate the sum of all associated transactions.amount and update grants.amount-used-hrs",
            "description": "",
            "custom": "false",
            "recordValueId": 565776,
            "createdAt": "2022-03-29T08:07:13.797Z",
            "updatedAt": "2022-03-29T08:28:24.318Z",
            "autoId": "85",
            "autoIdNum": 85,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Status to Opened\",\n        \"name\": \"Update Status to Opened\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return {'6860': JSON.stringify(['115498'])};}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[CLEVERO] Support Cases - Update Status to Not Started",
            "description": "Single Action\nUpdate Fields on an Entry\nMust be used with After Add or After Edit",
            "custom": "false",
            "recordValueId": 299712,
            "createdAt": "2022-02-18T03:59:29.343Z",
            "updatedAt": "2022-10-14T07:29:00.258Z",
            "autoId": "82",
            "autoIdNum": 82,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get order-items\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\": \"function(context){return `Successfully Retrieved Order Items`}\",\n        \"errorMsg\": \"function(context){return 'Retrieving Order Items failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Invoice from Job Record\",\n        \"name\": \"Create Invoice Record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const jobId = context.metaData.triggerInputs.entryId; const customerId = context.metaData.triggerInputs.triggerEntryDetail['customer']; let subTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { subTotal += parseFloat(entry.net); taxTotal += parseFloat(entry.tax); total += parseFloat(entry.total) }); return {'7476':JSON.stringify([`${jobId}`]),'7454':customerId,'7456': context.utils.moment().format('YYYY-MM-DD'), '7462': subTotal.toFixed(2), '7463': taxTotal.toFixed(2), '7464': total.toFixed(2)}; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"128757\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Invoice Subrecord Order Items From Job Record\",\n        \"name\": \"Create Invoice Subrecord Order Items\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries.map((entry, index) => { return { parent: parentEntryId, index: entry.index, item: entry.part || '[]', description: entry.description || '', quantity: entry.quantity, rate: parseFloat(entry.rate).toFixed(2), net: parseFloat(entry.net).toFixed(2), tax : parseFloat(entry.tax).toFixed(2), total : parseFloat(entry.total).toFixed(2),}; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"128839\"\n            }\n        ]\n    }\n]",
            "name": "[Forklift] Job -> Invoice",
            "description": "",
            "custom": "false",
            "recordValueId": 289140,
            "createdAt": "2022-02-03T06:10:48.692Z",
            "updatedAt": "2022-02-10T06:11:27.215Z",
            "autoId": "81",
            "autoIdNum": 81,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GET_ENTRIES\",\r\n        \"description\": \"get order-items\",\r\n        \"name\": \"get entries\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"successMsg\": \"function(context){return `Successfully Retrieved Order Items`}\",\r\n        \"errorMsg\": \"function(context){return 'Retrieving Order Items failed'}\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"getSubrecordParentId\"\r\n            },\r\n            {\r\n                \"name\": \"loadSubrecords\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"true\"\r\n            },\r\n            {\r\n                \"name\": \"subrecordId\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"getSubrecordRecordId\"\r\n            },\r\n            {\r\n                \"name\": \"ignoreLimits\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": true\r\n            },\r\n            {\r\n                \"name\": \"responseType\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"iov\"\r\n            },\r\n            {\r\n                \"name\": \"entryIds\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Create Invoice from Sale Record\",\r\n        \"name\": \"Create Invoice Record\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try { const saleId = context.metaData.triggerInputs.entryId; const originRecord = context.state.outputs[0][0]; const organisationId = originRecord['organisation'] || ['']; const salesRep = originRecord['sales-rep'] || ['']; let subTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0][0].subrecordEntries.forEach((entry, index) => { subTotal += parseFloat(entry.net); total += parseFloat(entry.total); taxTotal += parseFloat(entry.tax); }); return { '9752': organisationId, '6971': salesRep, '9753': JSON.stringify([`${saleId}`]), '6951': context.utils.moment().format('YYYY-MM-DD'), '17009':  JSON.stringify(['1672709']), '6958': subTotal.toFixed(2), '6959': taxTotal.toFixed(2), '6960': total.toFixed(2)}; } catch (e){ console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"120374\"\r\n            }\r\n        ]\r\n    },\r\n\t{\r\n        \"key\": \"CREATE_BULK_ENTRIES\",\r\n        \"description\": \"Create Invoice Subrecord Order Items From Sale Record\",\r\n        \"name\": \"Create Invoice Subrecord Order Items\",\r\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try { const parentEntryId = context.state.outputs[1].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; let subrecordEntries = context.state.outputs[0][0].subrecordEntries .filter((entry) => { const item = entry.item && JSON.parse(entry.item)[0]; return +item !== 120488; }) .map((entry, index) => { return { parent: parentEntryId, index: entry.index, quantity: entry.quantity, item: entry.item || '[]', description: entry.description || '', rate: parseFloat(entry.rate).toFixed(2), total: parseFloat(entry.total).toFixed(2), net: parseFloat(entry.net).toFixed(2), 'tax-rate': entry['tax-rate'], tax: parseFloat(entry.tax).toFixed(2), 'invoice-date': entry['invoice-date'], }; }); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"120474\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[Clevero] Sale -> Invoice",
            "description": "",
            "custom": "true",
            "recordValueId": 284345,
            "createdAt": "2022-01-26T03:38:18.327Z",
            "updatedAt": "2023-05-08T06:41:35.954Z",
            "autoId": "80",
            "autoIdNum": 80,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Experience Schedule (subrecord) entry\",\n        \"name\": \"Get Experience Schedule (subrecord) entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"130198\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"130206\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Get Experience Schedule (subrecord) entry\",\n        \"name\": \"Get Experience Schedule (subrecord) entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"122330\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const _ = context.utils._; const subRecordEntries = context.state.outputs[0][0].subrecordEntries; const idArray = _.without(subRecordEntries.map((entry)=>(entry.experience && JSON.parse(entry.experience)[0])), undefined, null, false); return idArray; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_BULK_ENTRIES\",\n        \"description\": \"Update subrecord fields\",\n        \"name\": \"Update subrecord fields\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const _ = context.utils._; const subRecordEntries = context.state.outputs[1]; const subRecordEntryIds = _.fromPairs( context.state.outputs[0][0].subrecordEntries.map((entry, index) => { if (!entry.experience && entry.experience === '[]') return; const experience = subRecordEntries.find( ({ recordValueId }) => +recordValueId === +JSON.parse(entry.experience)[0] ); return [ entry.recordValueId, { ...entry, 'start-time': experience['start-time'], 'end-time': experience['end-time'], supplier: experience.supplier} ]; }) ); console.log(subRecordEntryIds, 'se'); return {'130206': subRecordEntryIds}; }\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[Life's An Adventure] Update Experience Schedule (subrecord) Entries",
            "description": "",
            "custom": "false",
            "recordValueId": 282999,
            "createdAt": "2022-01-21T05:09:36.323Z",
            "updatedAt": "2022-01-30T13:31:19.907Z",
            "autoId": "79",
            "autoIdNum": 79,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send Email Notification to Stakeholders if status is Complete\",\n        \"name\": \"Send Email Notification to Stakeholders if status is Complete\",\n        \"condition\": \"function(context){return context.metaData.triggerInputs.triggerEntryDetail.status === '[\\\"248072\\\"]'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"from\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"to\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return context.state.outputs.length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return return context.state.outputs.length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "Send Email Notification if status is Complete [backlog-items]",
            "description": "",
            "custom": "false",
            "recordValueId": 281792,
            "createdAt": "2022-01-18T08:50:33.908Z",
            "updatedAt": "2022-07-20T06:41:56.234Z",
            "autoId": "78",
            "autoIdNum": 78,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send Email Notification to Submitted By if status is Pending Review\",\n        \"name\": \"Send Email Notification to Submitted By if status is Pending Review\",\n        \"condition\": \"function(context){return context.metaData.triggerInputs.triggerEntryDetail.status === '[\\\"248073\\\"]'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"from\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"to\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return context.state.outputs.length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return context.state.outputs.length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "Send Email Notification if status is Pending Review [backlog-items]",
            "description": "",
            "custom": "false",
            "recordValueId": 281588,
            "createdAt": "2022-01-18T01:54:04.886Z",
            "updatedAt": "2022-07-20T06:42:54.623Z",
            "autoId": "77",
            "autoIdNum": 77,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get contact entries\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"6633\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const email = context.metaData.triggerInputs.triggerEntryDetail.email; return [{'subject':1731,'type':'text','operator':'equals','value':email}]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values of cases\",\n        \"name\": \"Update values\",\n        \"condition\":\"function(context){if(context.state.outputs[0].length) {return true;} else {return false;}}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const entries = context.state.outputs[0]; const entry  = entries[0]; return {'3344': JSON.stringify([`${entry.recordValueId}`]), '2791': `${entry['first-name']} ${entry['last-name']}`, '3345': entry.customer || JSON.stringify([]) };}\"\n            }\n        ]\n    }\n]",
            "name": "[ONLINE_FORM] : General Consultants Case Submission",
            "description": "",
            "custom": "false",
            "recordValueId": 261602,
            "createdAt": "2021-12-15T03:54:24.429Z",
            "updatedAt": "2021-12-16T05:56:59.474Z",
            "autoId": "76",
            "autoIdNum": 76,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Convert Case to Task\",\n        \"name\": \"Convert Case to Task\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const customer = context.metaData.triggerInputs.triggerEntryDetail['customers']; const assignedTo = context.metaData.triggerInputs.triggerEntryDetail['assigned-to']; const caseId = context.metaData.triggerInputs.entryId; const caseTitle = context.metaData.triggerInputs.triggerEntryDetail['title']; let data = {'2269': customer, '2134': assignedTo, '10548':JSON.stringify([`${caseId}`]), '2133': caseTitle}; return data; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"17666\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Case field values after Task is created\",\n        \"name\": \"Update Case field values\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return {'4232': JSON.stringify(['84147'])};}\"\n            }\n        ]\n    }\n]",
            "name": "[Consultants] Convert Case to Task",
            "description": "",
            "custom": "false",
            "recordValueId": 260637,
            "createdAt": "2021-12-13T05:42:58.209Z",
            "updatedAt": "2021-12-16T08:22:52.140Z",
            "autoId": "75",
            "autoIdNum": 75,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send task email on create\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"type\": \"hard-coded\",\n                    \"name\": \"kalysys\",\n                    \"address\": \"signup@kalysys.com.au\"\n                }\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [\n                    {\n                        \"type\": \"hard-coded\",\n                        \"address\": \"bishantpant2010@gmail.com\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"31272\"\n            }\n        ]\n    }\n]",
            "name": "vpn",
            "description": "",
            "custom": "false",
            "recordValueId": 237729,
            "createdAt": "2021-10-28T10:06:37.616Z",
            "updatedAt": "2021-12-05T11:28:19.832Z",
            "autoId": "74",
            "autoIdNum": 74,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send scheduled email\",\n        \"name\": \"Send scheduled email\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"type\": \"hard-coded\",\n                    \"name\": \"Clevero Notifications\",\n                    \"address\": \"notifications@mailvero.com\"\n                }\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [\n                    {\n                        \"type\": \"dynamic\",\n                        \"address\": \"client.email\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let triggerConfigTemplate; let triggerInputTemplate; try { triggerConfigTemplate = context.metaData.triggerConfig.inputs.find( (config) => { return config.name === 'templateId'; } ).value; } catch (e) {} try { triggerInputTemplate = context.metaData.triggerInputs.templateId; } catch (e) {} return triggerConfigTemplate || triggerInputTemplate; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return context.state.outputs.length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return context.state.outputs.length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.client.recordValueId; const clientRecordId = context.state.outputs[0].context.client.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "[REMINDER] Send reminder email",
            "description": "",
            "custom": "false",
            "recordValueId": 31150,
            "createdAt": "2020-07-01T02:35:11.971Z",
            "updatedAt": "2022-07-20T06:43:23.698Z",
            "autoId": "73",
            "autoIdNum": 73,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERATE_QRCODE\",\n        \"description\": \"Generate the QR code\",\n        \"name\": \"Generic QR Code Generation\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"message\",\n                \"source\": \"trigger-config\",\n                \"value\": \"qrMessage\"\n            },\n            {\n                \"name\": \"title\",\n                \"source\": \"trigger-config\",\n                \"value\": \"qrTitle\"\n            },\n            {\n                \"name\": \"notes\",\n                \"source\": \"trigger-config\",\n                \"value\": \"qrNotes\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"Updating Field\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Generate QR Code, Update Fields",
            "custom": "false",
            "recordValueId": 226909,
            "createdAt": "2021-10-13T03:37:47.032Z",
            "updatedAt": "2021-10-15T06:01:20.703Z",
            "autoId": "71",
            "autoIdNum": 71,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": " [\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get subrecords\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Step 2\",\n        \"name\": \"Step 2\",\n        \"condition\": \"function(context){ console.log('output1', JSON.stringify(context)); return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    }\n]",
            "name": "Inventory Tran - Get Subrecords",
            "custom": "false",
            "recordValueId": 168663,
            "createdAt": "2021-08-27T04:36:26.436Z",
            "updatedAt": "2021-08-27T04:45:16.637Z",
            "autoId": "70",
            "autoIdNum": 70,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get specific activities\",\n        \"name\": \"get entries of activities\",\n        \"condition\": \"function(context){ const customer = context.metaData.customer['unique-identifier']; const v2ListedCustomers = ['phoenixparknh', 'neighbourhood-house-demo-account']; return !v2ListedCustomers.includes(customer) && (context.metaData.triggerInputs.triggerEntryDetail['booking-type'] === '[\\\"132967\\\"]' || '[\\\"284897\\\"]' || '[\\\"284898\\\"]') && context.metaData.triggerInputs.triggerEntryDetail['term-attendance-records-created'] === 'false' && context.metaData.triggerInputs.triggerEntryDetail['do-not-create-attendance'] === 'false'; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132159\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const session = context.metaData.triggerInputs.triggerEntryDetail['activity'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['activity'])[0]; if(session){ return [session]}else{return []} }\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const course = context.metaData.triggerInputs.triggerEntryDetail['course'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['course'])[0]; return [{'subject':8531,'type':'array','operator':'any_of','value':[`${course}`]}]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Attendance Record Entries\",\n        \"name\": \"Creating Attendance Record Entries\",\n        \"condition\": \"function(context){ const customer = context.metaData.customer['unique-identifier']; const v2ListedCustomers = ['phoenixparknh', 'neighbourhood-house-demo-account']; return !v2ListedCustomers.includes(customer) && context.state.outputs[0].length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { let loadedEntries = context.metaData.loadedEntries; const member = context.metaData.triggerInputs.triggerEntryDetail['member']; const attendances = context.state.outputs[0] && context.state.outputs[0].map((activity) => { console.log('see here => ', { transaction: JSON.stringify([ `${context.metaData.triggerInputs.entryId}`, ]), member: member || JSON.stringify([]), activity: JSON.stringify([`${activity.recordValueId}`]) || JSON.stringify([]), 'activity-type': JSON.stringify([ `${loadedEntries.activity[0].recordValueId}`, ]) || JSON.stringify([]), 'attendee-email': loadedEntries.member[0].email, date: context.utils.moment .tz(activity['start-time'], 'Australia/Sydney') .format('YYYY-MM-DD'), duration: activity.duration, status: JSON.stringify([`132839`]), }); return { transaction: JSON.stringify([ `${context.metaData.triggerInputs.entryId}`, ]), member: member || JSON.stringify([]), activity: JSON.stringify([`${activity.recordValueId}`]) || JSON.stringify([]), 'activity-type': JSON.stringify([ `${loadedEntries.activity[0].recordValueId}`, ]) || JSON.stringify([]), 'attendee-email': loadedEntries.member[0].email, date: context.utils.moment .tz(activity['start-time'], 'Australia/Sydney') .format('YYYY-MM-DD'), duration: activity.duration, status: JSON.stringify([`132839`]), }; }); return attendances; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132823\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after  Submit\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){ const customer = context.metaData.customer['unique-identifier']; const v2ListedCustomers = ['phoenixparknh', 'neighbourhood-house-demo-account']; return !v2ListedCustomers.includes(customer); }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){return {'7744':true}}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Transaction - Create Course/Term Attendances",
            "description": "",
            "custom": "false",
            "recordValueId": 140495,
            "createdAt": "2021-07-19T02:59:43.142Z",
            "updatedAt": "2023-07-21T04:16:14.461Z",
            "autoId": "69",
            "autoIdNum": 69,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[  \n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get attendances for specific vouvher\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132823\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const voucherId = context.metaData.triggerInputs.triggerEntryDetail['voucher-used'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['voucher-used'])[0]; console.log(voucherId,'v'); return [{'subject':8164,'type':'array','operator':'any_of','value':[`${voucherId}`]}]; }\"\n            }\n        ]\n    },\n        {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update the Voucher remaining\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const totalAttendances = context.state.outputs[0].length; let visitsRemaining = context.metaData.loadedEntries.voucherUsed[0]['number-of-visits']; let data = { '8161':+visitsRemaining - totalAttendances }; return data; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"138255\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let entryId = context.metaData.triggerInputs.triggerEntryDetail['voucher-used'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['voucher-used'])[0]; return entryId; }\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry after Member has been created\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let data = {'8229': true}; return data;}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House Attendance - Update Voucher Visits",
            "description": "Update Voucher Visits Remaining",
            "custom": "false",
            "recordValueId": 140348,
            "createdAt": "2021-07-18T23:47:38.134Z",
            "updatedAt": "2021-12-10T04:11:28.401Z",
            "autoId": "68",
            "autoIdNum": 68,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get specific activities\",\n        \"name\": \"get entries of activities\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getEntriesRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getEntriesFilter\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Get Entry, Update Fields",
            "custom": "false",
            "recordValueId": 139226,
            "createdAt": "2021-07-15T04:52:29.696Z",
            "updatedAt": "2021-07-26T10:59:11.995Z",
            "autoId": "67",
            "autoIdNum": 67,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send task email on create\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"sendEmailFrom\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"sendEmailTo\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"sendEmailTemplateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { console.log('CREATE CREATE', JSON.stringify(context)); const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log('error', e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Send Email w Relationship",
            "description": "Send an email template\nCreate Email entry\nCreate Relationship entry",
            "custom": "false",
            "recordValueId": 138840,
            "createdAt": "2021-07-14T04:48:44.268Z",
            "updatedAt": "2021-07-14T04:48:44.268Z",
            "autoId": "66",
            "autoIdNum": 66,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create an entry\",\n        \"name\": \"Generic Create Entry\",\n        \"condition\": \"function(context){  return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"createEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"createEntryRecordId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"createEntryFormId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry after Member has been created\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": false\n            }\n        ]\n    },\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get attendances for specific vouvher\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132823\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const voucherId = context.metaData.triggerInputs.triggerEntryDetail['voucher'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['voucher'])[0]; console.log(voucherId,'v'); return [{'subject':8164,'type':'array','operator':'any_of','value':[`${voucherId}`]}]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update the Voucher remaining\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const totalAttendances = context.state.outputs[2].length; let visitsRemaining = context.metaData.loadedEntries.voucherUsed[0]['number-of-visits']; let data = { '8161':+visitsRemaining - totalAttendances }; return data; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"138255\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let entryId = context.metaData.triggerInputs.triggerEntryDetail['voucher'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['voucher'])[0]; return entryId; }\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Create Entry, Update Fields",
            "description": "Create an Entry\nUpdate existing Entry",
            "custom": "false",
            "recordValueId": 138263,
            "createdAt": "2021-07-12T12:25:24.367Z",
            "updatedAt": "2021-12-13T05:21:03.563Z",
            "autoId": "65",
            "autoIdNum": 65,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send task email on create\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"sendEmailFrom\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"sendEmailTo\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"sendEmailTemplateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { console.log('CREATE CREATE', JSON.stringify(context)); const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log('error', e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after SMS and Email is send\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Send Email w Relationship, Update Fields",
            "description": "Send an email template\nCreate Email entry\nCreate Relationship entry\nUpdate Fields",
            "custom": "false",
            "recordValueId": 137435,
            "createdAt": "2021-07-09T00:53:29.375Z",
            "updatedAt": "2021-07-14T04:12:17.982Z",
            "autoId": "64",
            "autoIdNum": 64,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Update Fields",
            "description": "Single Action\nUpdate Fields on an Entry\nMust be used with After Add or After Edit",
            "custom": "false",
            "recordValueId": 137245,
            "createdAt": "2021-07-08T06:11:43.491Z",
            "updatedAt": "2021-07-14T03:31:16.776Z",
            "autoId": "63",
            "autoIdNum": 63,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry after invoice has been created\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return { '859': 'Testing Update Entry'};}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    },\n   {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Bulk Entries\",\n        \"name\": \"Creating multiple All Fields\",\n        \"condition\": \"function(context){ return false; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { let data = [{'text': 'Bulk 1'}, {'text': 'Bulk 2'}]; return data; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"hard-coded\",\n                \"value\": -1\n            }\n        ]\n    },\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send SMS\",\n        \"name\": \"Send SMS\",\n        \"condition\": \"function(context){ return false; }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [{\"type\": \"hard-coded\", \"phone\": \"0403340909\"}]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"76948\"\n            }\n        ]\n    },\n   {\n      \"key\":\"SEND_EMAIL\",\n      \"description\":\"Send email\",\n      \"name\":\"Send task email on create\",\n      \"condition\":\"function(context){ console.log('####', JSON.stringify(context), Object.keys(context), '####'); return false; }\",\n      \"inputs\":[\n         {\n            \"name\":\"recordId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"recordId\"\n         },\n         {\n            \"name\":\"entryId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"entryId\"\n         },\n         {\n            \"name\":\"from\",\n            \"source\":\"hard-coded\",\n            \"value\":{\n               \"type\":\"hard-coded\",\n               \"name\":\"Clevero Notifications\",\n               \"address\":\"notifications@mailvero.com\"\n            }\n         },\n         {\n            \"name\":\"to\",\n            \"source\":\"hard-coded\",\n            \"value\":[\n               {\n                  \"type\":\"hard-coded\",\n                  \"address\":\"lez@clevero.co\"\n               }\n            ]\n         },\n         {\n            \"name\":\"templateId\",\n            \"source\":\"trigger-config\",\n            \"value\":\"templateId\"\n         }\n      ]\n   },\n    {\n      \"key\":\"SEND_EMAIL\",\n      \"description\":\"Send email\",\n      \"name\":\"Send task email on create\",\n      \"condition\":\"function(context){ console.log('####', JSON.stringify(context), Object.keys(context), '####'); return false; }\",\n      \"inputs\":[\n         {\n            \"name\":\"recordId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"recordId\"\n         },\n         {\n            \"name\":\"entryId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"entryId\"\n         },\n         {\n            \"name\":\"from\",\n            \"source\":\"hard-coded\",\n            \"value\":{\n               \"type\":\"hard-coded\",\n               \"name\":\"Clevero Notifications\",\n               \"address\":\"notifications@veromail.com\"\n            }\n         },\n         {\n            \"name\":\"to\",\n            \"source\":\"hard-coded\",\n            \"value\":[\n               {\n                  \"type\":\"hard-coded\",\n                  \"address\":\"kit@clevero.co\"\n               }\n            ]\n         },\n         {\n            \"name\":\"templateId\",\n            \"source\":\"trigger-config\",\n            \"value\":\"function123\"\n         }\n      ]\n   },\n   {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Entry All Fields\",\n        \"name\": \"Create Entry Name\",\n        \"condition\": \"function(context){ return false; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { let data = {'text': 'hello world'}; return data; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"makeAutoId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"hard-coded\",\n                \"value\": -1\n            }\n        ]\n    }\n]",
            "name": "DEVMODE TEST ALL ACTIONS - ALL Fields",
            "description": "",
            "custom": "true",
            "recordValueId": 136181,
            "createdAt": "2021-07-06T01:12:55.290Z",
            "updatedAt": "2021-12-05T11:04:38.585Z",
            "autoId": "62",
            "autoIdNum": 62,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"SEND_EMAIL\",\r\n        \"description\": \"Send email\",\r\n        \"name\": \"Send task email on create\",\r\n        \"condition\": \"function(context){ const status = context.metaData.triggerInputs.triggerEntryDetail['scale'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['scale'])[0]; if(status === '120071' || status === '120072') {return true;} }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"recordId\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"entryId\"\r\n            },\r\n            {\r\n                \"name\": \"from\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"from\"\r\n            },\r\n            {\r\n                \"name\": \"to\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"to\"\r\n            },\r\n            {\r\n                \"name\": \"templateId\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"templateId\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Save email into the emails record\",\r\n        \"name\": \"Save email into the emails record\",\r\n        \"condition\": \"function(context){ const status = context.metaData.triggerInputs.triggerEntryDetail['scale'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['scale'])[0]; if(status === '120071' || status === '120072') {return true;} }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"15169\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Save relationship\",\r\n        \"name\": \"Save relationship\",\r\n        \"condition\": \"function(context){ const status = context.metaData.triggerInputs.triggerEntryDetail['scale'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['scale'])[0]; if(status === '120071' || status === '120072') {return true;} }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"15172\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[Massage Therapists] Send Survey Email",
            "custom": "false",
            "recordValueId": 124851,
            "createdAt": "2021-05-31T07:17:28.366Z",
            "updatedAt": "2021-05-31T08:53:57.621Z",
            "autoId": "61",
            "autoIdNum": 61,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Opportunity from Deal\",\n        \"name\": \"Create Opportunity from Deal\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const referredOrg = context.metaData.loadedEntries['referred-organisation'][0] && context.metaData.loadedEntries['referred-organisation'][0]['company-name']; const referredContact = context.metaData.triggerInputs.triggerEntryDetail['referred-contact'] || JSON.stringify([]); const referredOrganisation = context.metaData.triggerInputs.triggerEntryDetail['referred-organisation'] || JSON.stringify([]); const data = { 3846: `${referredOrg} - Referral`, 4305: referredContact, 4240: referredOrganisation, 3849: JSON.stringify(['124396']) };  return data;  }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"76758\"\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"76764\"\n            }\n        ]\n    },\n        {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after opportunity is created\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].id) {return true;} else {return false;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return {'7183': JSON.stringify([`${context.state.outputs[0].id}`])};}\"\n            }\n        ]\n    }\n]",
            "name": "Create Opportunity",
            "custom": "true",
            "recordValueId": 124394,
            "createdAt": "2021-05-29T04:48:28.166Z",
            "updatedAt": "2021-05-29T05:16:06.793Z",
            "autoId": "60",
            "autoIdNum": 60,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){ if(context.metaData.triggerInputs.triggerEntryDetail['90858-status'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['90858-status'])[0] !== '102570') {return false;} if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){if(context.metaData.triggerInputs.triggerEntryDetail['90858-status'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['90858-status'])[0] !== '102570') {return false;} if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { if(!context.metaData.loadedEntries.assignedTo[0] || !context.metaData.loadedEntries.assignedTo[0]['phone']) {return ;} const res = context.state.outputs[0].response[0].response;  const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ if(context.metaData.triggerInputs.triggerEntryDetail['90858-status'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['90858-status'])[0] !== '102570') {return false;} if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { if(!context.metaData.loadedEntries.assignedTo[0] || !context.metaData.loadedEntries.assignedTo[0]['phone']) {return ;} const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after Submit\",\n        \"name\": \"Update fields of any entry\",\n\t    \"condition\": \"function(context){if(context.metaData.triggerInputs.triggerEntryDetail['90858-status'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['90858-status'])[0] !== '102570') {return false;} if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"91210\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const entryID  = context.metaData.triggerInputs.triggerEntryDetail['opportunity'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['opportunity'])[0]; return entryID.toString();}\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values-linked\"\n            }\n        ]\n    }\n]",
            "name": "Upon status of cancel send cancellation sms and update entry",
            "custom": "false",
            "recordValueId": 103951,
            "createdAt": "2021-03-03T04:13:18.280Z",
            "updatedAt": "2021-03-03T04:13:18.280Z",
            "autoId": "59",
            "autoIdNum": 59,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[{\"key\":\"CREATE_ENTRY\",\"description\":\"Create Invoice From CRS Claim\",\"name\":\"Creating Invoice From CRS Claim\",\"condition\":\"function(context){ return true; }\",\"inputs\":[{\"name\":\"values\",\"source\":\"function\",\"value\":\"function(context){ try { const crsClaimId = context.metaData.triggerInputs.entryId; const {clinic, autoId} = context.metaData.triggerInputs.triggerEntryDetail; const rate = context.metaData.loadedEntries.clinic[0]['fee']; const grossAmount = +rate;  const amount = +rate + 0.1 * +rate; const tax =  0.1 * +rate; const jobID = context.metaData.triggerInputs.entryId; const data =  { '3605': JSON.stringify([`${crsClaimId}`]), '4158': autoId, '4213': clinic, '4161' : grossAmount.toFixed(2),'4163' : amount.toFixed(2), '4162':tax.toFixed(2) };  return data; } catch (e) { console.log(e); throw e; } }\"},{\"name\":\"recordId\",\"source\":\"hard-coded\",\"value\":\"72208\"}]},{\"key\":\"CREATE_BULK_ENTRIES\",\"description\":\"Create Subrecord Invoice From CRS CLAIM\",\"name\":\"Creating Subrecord Invoice From CRS CLAIM\",\"condition\":\"function(context){ return true; }\",\"inputs\":[{\"name\":\"values\",\"source\":\"function\",\"value\":\"function(context){ try {const parentEntryId = context.state.outputs[0].id; const rate = context.metaData.loadedEntries.clinic[0]['fee']; const surgeonName = context.metaData.loadedEntries.surgeon[0]['full-name']; const crsClaimName = context.metaData.triggerInputs.triggerEntryDetail['first-name'] + ' ' + context.metaData.triggerInputs.triggerEntryDetail['last-name']; const amount = +rate;  const grossAmount = +rate + 0.1 * +rate; const data =  { 'parent': ''+parentEntryId, 'index': '0', 'quantity': '1' , 'description': `Application Management Fee with ${crsClaimName} for surgery with ${surgeonName}`, 'rate': rate, 'gross-amount' : grossAmount.toFixed(2),'amount' : amount.toFixed(2) ,'account' : JSON.stringify(['102694']), 'tax-rate' : JSON.stringify(['102687'])}; return [{...data}]; } catch (e) { console.log(e); throw e; } }\"},{\"name\":\"recordId\",\"source\":\"hard-coded\",\"value\":\"81852\"}]},{\"key\":\"UPDATE_ENTRY\",\"description\":\"test update entry after invoice has been created\",\"name\":\"test update entry\",\"inputs\":[{\"name\":\"values\",\"source\":\"function\",\"value\":\"function(context){ return { '5600': JSON.stringify([`${context.state.outputs[0].id}`])};}\"},{\"name\":\"recordId\",\"source\":\"trigger-inputs\",\"value\":\"recordId\"},{\"name\":\"entryId\",\"source\":\"trigger-inputs\",\"value\":\"entryId\"}]}]",
            "name": "Test",
            "custom": "false",
            "recordValueId": 103407,
            "createdAt": "2021-03-01T02:52:46.471Z",
            "updatedAt": "2021-03-01T02:52:46.471Z",
            "autoId": "58",
            "autoIdNum": 58,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[{\"key\":\"CREATE_ENTRY\",\"description\":\"Create Invoice From CRS Claim\",\"name\":\"Creating Invoice From CRS Claim\",\"condition\":\"function(context){ return true; }\",\"inputs\":[{\"name\":\"values\",\"source\":\"function\",\"value\":\"function(context){ try { const crsClaimId = context.metaData.triggerInputs.entryId; const {clinic, autoId} = context.metaData.triggerInputs.triggerEntryDetail; const rate = context.metaData.loadedEntries.clinic && context.metaData.loadedEntries.clinic[0] && context.metaData.loadedEntries.clinic[0]['fee']; const grossAmount = +rate;  const amount = +rate + 0.1 * +rate; const tax =  0.1 * +rate; const jobID = context.metaData.triggerInputs.entryId; const data =  { '3604': context.utils.moment().format('YYYY-MM-DD') , '4154' :context.utils.moment().add(14,'days').format('YYYY-MM-DD') , '3605': JSON.stringify([`${crsClaimId}`]), '4158': autoId, '4213': clinic, '4161' : grossAmount.toFixed(2),'4163' : amount.toFixed(2), '4162':tax.toFixed(2) };  return data; } catch (e) { console.log(e); throw e; } }\"},{\"name\":\"recordId\",\"source\":\"hard-coded\",\"value\":\"72208\"},{\"name\":\"makeAutoId\",\"source\":\"hard-coded\",\"value\":true},{\"name\":\"formId\",\"source\":\"hard-coded\",\"value\":-1}]},{\"key\":\"CREATE_BULK_ENTRIES\",\"description\":\"Create Subrecord Invoice From CRS CLAIM\",\"name\":\"Creating Subrecord Invoice From CRS CLAIM\",\"condition\":\"function(context){ return true; }\",\"inputs\":[{\"name\":\"values\",\"source\":\"function\",\"value\":\"function(context){ try { const parentEntryId = context.state.outputs[0].id; const rate = context.metaData.loadedEntries.clinic && context.metaData.loadedEntries.clinic[0] && context.metaData.loadedEntries.clinic[0]['fee']; const surgeonName = context.metaData.loadedEntries.surgeon && context.metaData.loadedEntries.surgeon[0] && context.metaData.loadedEntries.surgeon[0]['full-name']; const claimManager = context.metaData.triggerInputs.triggerEntryDetail['client-liaison-manager']; const amount = +rate;  const grossAmount = +rate + 0.1 * +rate; const data =  { 'parent': ''+parentEntryId, 'index': '0', 'quantity': '1' , 'description': `Application Management Fee with ${claimManager} for surgery with ${surgeonName}`, 'rate': rate, 'gross-amount' : grossAmount.toFixed(2),'amount' : amount.toFixed(2),'account' : JSON.stringify(['102694']), 'tax-rate' : JSON.stringify(['102687'])}; return [{...data}]; } catch (e) { console.log(e); throw e; } }\"},{\"name\":\"recordId\",\"source\":\"hard-coded\",\"value\":\"81852\"}]},{\"key\":\"UPDATE_ENTRY\",\"description\":\"test update entry after invoice has been created\",\"name\":\"test update entry\",\"inputs\":[{\"name\":\"values\",\"source\":\"function\",\"value\":\"function(context){ return { '5600': JSON.stringify([`${context.state.outputs[0].id}`])};}\"},{\"name\":\"recordId\",\"source\":\"trigger-inputs\",\"value\":\"recordId\"},{\"name\":\"entryId\",\"source\":\"trigger-inputs\",\"value\":\"entryId\"}]}]",
            "name": "Create Invoice from CRS-Claims (SHE)",
            "custom": "false",
            "recordValueId": 103135,
            "createdAt": "2021-02-26T08:51:20.776Z",
            "updatedAt": "2021-02-26T08:51:20.776Z",
            "autoId": "57",
            "autoIdNum": 57,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after Submit\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){console.log(context.metaData.loadedEntries.assignedTo[0]['phone'],'phone'); if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values-own\"\n            }\n        ]\n    },\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){ if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){ if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { if(!context.metaData.loadedEntries.assignedTo[0] || !context.metaData.loadedEntries.assignedTo[0]['phone']) {return ;} const res = context.state.outputs[1].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { if(!context.metaData.loadedEntries.assignedTo[0] || !context.metaData.loadedEntries.assignedTo[0]['phone']) {return ;} const primaryEntryId = context.state.outputs[2].id; const primaryRecordId = context.state.outputs[2].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[1].context.recordValueId; const clientRecordId = context.state.outputs[1].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after Submit\",\n        \"name\": \"Update fields of any entry\",\n\t    \"condition\": \"function(context){ if(context.metaData.loadedEntries.assignedTo[0] && context.metaData.loadedEntries.assignedTo[0]['phone']) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"91210\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const entryID  = context.metaData.triggerInputs.triggerEntryDetail['opportunity'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['opportunity'])[0]; return entryID.toString();}\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values-linked\"\n            }\n        ]\n    }\n]",
            "name": "BACS - Appointment Cancellation (Send SMS and update Status)",
            "custom": "false",
            "recordValueId": 102600,
            "createdAt": "2021-02-24T09:41:50.298Z",
            "updatedAt": "2021-02-24T09:41:50.298Z",
            "autoId": "56",
            "autoIdNum": 56,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send task email on create\",\n        \"condition\": \"function(context){ let roles = context.metaData.loadedEntries.admin[0].roles.split(',');  if(roles.includes(' Specialist')) { return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"from\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"to\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ let roles = context.metaData.loadedEntries.admin[0].roles.split(','); if(roles.includes(' Specialist')) { return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ let roles = context.metaData.loadedEntries.admin[0].roles.split(','); if(roles.includes(' Specialist')) { return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "Client Alert Email",
            "custom": "false",
            "recordValueId": 102584,
            "createdAt": "2021-02-24T08:56:57.917Z",
            "updatedAt": "2021-02-24T08:56:57.917Z",
            "autoId": "55",
            "autoIdNum": 55,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId-sms\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){   return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const res = context.state.outputs[0].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){   return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send email\",\n        \"name\": \"Send task email on create\",\n        \"condition\": \"function(context){ return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false'; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"trigger-config\",\n                \"value\": \"from\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"to\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId-email\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false'; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[3].dataPassed; const emailRes = context.state.outputs[3].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[4].id; const primaryRecordId = context.state.outputs[4].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[3].context.recordValueId; const clientRecordId = context.state.outputs[3].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after SMS and Email is send\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['advisor-notified'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "Send sms, email and update(tick) advisor-notified field",
            "custom": "false",
            "recordValueId": 102402,
            "createdAt": "2021-02-23T15:14:06.626Z",
            "updatedAt": "2021-02-23T15:14:06.626Z",
            "autoId": "54",
            "autoIdNum": 54,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get all tasks from specific job\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"17666\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const jobID = context.metaData.triggerInputs.triggerEntryDetail['copy-tasks-from']; return [{'subject':2132,'type':'array','operator':'any_of','value':[`${JSON.parse(jobID)[0]}`]}] }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Tasks for Job\",\n        \"name\": \"Creating Tasks For Job\",\n        \"condition\": \"function(context){ if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const jobID = context.metaData.triggerInputs.entryId; let entries =  context.state.outputs[0].map((entry, index) => { return { job: JSON.stringify([`${jobID}`]), title: entry['title'] || '', 'assigned-to': entry['assigned-to'] || '[]', description: entry['description'] || '', 'start-date':  context.metaData.triggerInputs.triggerEntryDetail['start-date'] || '', 'due-date':  '', priority: entry['priority'] || '[]', '317-scope-video': entry['317-scope-video'] || '', status: JSON.stringify(['17681']), '317-handover-video': entry['317-handover-video'] || '', '317-attachments': '[]', '317-internal-notes': '', customer: entry['customer'] || '[]', '317-task-type': entry['317-task-type'] || '[]', '317-contact-to-notify': '[]'} }); return entries;  } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"17666\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update  after Tasks has been copied!!\",\n        \"name\": \"Update  after Tasks has been copied!!\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){return {'5152': '[]'};}\"\n            }\n        ]\n    }\n]",
            "name": "Copy Tasks From JOBs",
            "custom": "false",
            "recordValueId": 101693,
            "createdAt": "2021-02-18T14:50:47.337Z",
            "updatedAt": "2021-02-18T14:50:47.337Z",
            "autoId": "53",
            "autoIdNum": 53,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after submit(Leads/Client)\",\n        \"name\": \"Update fields of any entry\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"91425\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const entryId = context.metaData.triggerInputs.triggerEntryDetail['main-contact-person']; console.log(entryId,'entry-id'); return JSON.parse(entryId)[0];}\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const clientId = context.metaData.triggerInputs.entryId; const loadedEntry = context.metaData.loadedEntries.contact[0]['family-client'];  const isEmpty = loadedEntry === undefined ? true : JSON.parse(loadedEntry).length ? false : true ;   if(isEmpty){return {'5485': JSON.stringify([`${clientId}`])};}else{ return;}}\"\n            }\n        ]\n    }\n]",
            "name": "Update Family/Client field of contact record (BACS)",
            "custom": "false",
            "recordValueId": 101430,
            "createdAt": "2021-02-17T05:19:39.977Z",
            "updatedAt": "2021-02-17T05:19:39.977Z",
            "autoId": "52",
            "autoIdNum": 52,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n\t\t\"condition\" : \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['sms-sent'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n\t\t\"condition\" : \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['sms-sent'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const res = context.state.outputs[0].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n\t\t\"condition\" : \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['sms-sent'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after SMS is send\",\n        \"name\": \"Update fields of any entry\",\n\t\t\"condition\" : \"function(context){  return context.metaData.triggerInputs.triggerEntryDetail['sms-sent'] === 'false';}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "Send SMS and tick sms send field (BACS)",
            "custom": "false",
            "recordValueId": 101210,
            "createdAt": "2021-02-16T16:28:59.365Z",
            "updatedAt": "2021-02-16T16:28:59.365Z",
            "autoId": "51",
            "autoIdNum": 51,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Opportunities from Clients\",\n        \"name\": \"Creating Opportunities from Clients\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { console.log('main contact', context.metaData.loadedEntries['main-contact-person']); const opportunityFor = context.metaData.triggerInputs.triggerEntryDetail[ 'opportunity-for' ]; const family = context.metaData.triggerInputs.triggerEntryDetail['family-name']; const contactPhone = context.metaData.loadedEntries['main-contact-person'] && context.metaData.loadedEntries['main-contact-person'][0] && context.metaData.loadedEntries['main-contact-person'][0]['phone']; const contactEmail = context.metaData.loadedEntries['main-contact-person'] && context.metaData.loadedEntries['main-contact-person'][0] && context.metaData.loadedEntries['main-contact-person'][0]['email']; const mainContact = context.metaData.triggerInputs.triggerEntryDetail[ 'main-contact-person' ]; const referrer = context.metaData.triggerInputs.triggerEntryDetail['referrer']; const referrerType = context.metaData.triggerInputs.triggerEntryDetail['referrer-type']; const clientId = context.metaData.triggerInputs.entryId; const statusValue = JSON.stringify(['91379']); let data = { '4683': context.utils.moment().format('YYYY-MM-DD'), '5425': JSON.stringify(['100884']), '5362': opportunityFor, '5434': family || JSON.stringify([]), ...(contactPhone ? { '5433': contactPhone } : {}), ...(contactEmail ? { '6794': contactEmail } : {}), '5361': JSON.stringify([`${clientId}`]), '4693': statusValue, '5432': mainContact || JSON.stringify([]), '8975': referrer || JSON.stringify([]), '7016': referrerType, }; return data; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"91210\"\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"115052\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after opportunity is created\",\n        \"name\": \"Update fields of any entry\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return {'4716': JSON.stringify(['91277'])};}\"\n            }\n        ]\n    }\n]",
            "name": "[BACS] Convert Client to Opportunity",
            "description": "",
            "custom": "false",
            "recordValueId": 100750,
            "createdAt": "2021-02-14T03:53:58.578Z",
            "updatedAt": "2022-02-18T03:18:52.160Z",
            "autoId": "50",
            "autoIdNum": 50,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Create Appointment from Opportunities\",\r\n        \"name\": \"Creating Appointment from Opportunities\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try {  const feeSchedule = context.metaData.triggerInputs.triggerEntryDetail['fee-schedule']; const client = context.metaData.triggerInputs.triggerEntryDetail.client; const appointmentFor = context.metaData.triggerInputs.triggerEntryDetail['appointment-for']; const oppId = context.metaData.triggerInputs.entryId; const statusValue = JSON.stringify(['100703']);  let data = {'5754': feeSchedule, '5386': client, '5387': JSON.stringify([`${oppId}`]) ,'5405':appointmentFor, '5409':statusValue}; return data; } catch (e) { console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"100407\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"UPDATE_ENTRY\",\r\n        \"description\": \"update entry after appointment has been created! \",\r\n        \"name\": \"test update entry\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return { '5425': JSON.stringify(['100886']) };}\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"recordId\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"entryId\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"UPDATE_ENTRY\",\r\n        \"description\": \"Update the Lead/Client on the Opp! \",\r\n        \"name\": \"test update entry\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return { '10332': true }; }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ return '91013'; }\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ let currentEntryDetails = context.metaData.triggerInputs.triggerEntryDetail; let clientEntryId = JSON.parse(currentEntryDetails.client)[0]; console.log('clientId', clientEntryId); return clientEntryId; }\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"SEND_EMAIL\",\r\n        \"description\": \"Send email\",\r\n        \"name\": \"Send task email on create\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"recordId\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"entryId\"\r\n            },\r\n            {\r\n                \"name\": \"from\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"sendEmailFrom\"\r\n            },\r\n            {\r\n                \"name\": \"to\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"sendEmailTo\"\r\n            },\r\n            {\r\n                \"name\": \"templateId\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"sendEmailTemplateId\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[BACS] Convert Opportunities to Appointment",
            "description": "",
            "custom": "false",
            "recordValueId": 100744,
            "createdAt": "2021-02-14T03:36:02.849Z",
            "updatedAt": "2022-01-14T01:15:19.502Z",
            "autoId": "49",
            "autoIdNum": 49,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"name\": \"create bulk entries(generic)\",\n        \"description\": \"create bulk entries (cen be made generic. values input should have the array of new values to create in iov format)\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "Testing Recurring Appointment",
            "custom": "false",
            "recordValueId": 97304,
            "createdAt": "2021-01-22T06:57:32.900Z",
            "updatedAt": "2021-01-22T06:57:32.900Z",
            "autoId": "48",
            "autoIdNum": 48,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get activities entries\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"87692\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"fov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const contactID = context.metaData.triggerInputs.entryId; return [{'subject':4472,'type':'array','operator':'any_of','value':[`${contactID}`]}] }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Opportunity from Contacts\",\n        \"name\": \"Creating Opportunity from Contacts\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try {  const {organisation,industry,country} = context.metaData.triggerInputs.triggerEntryDetail; const owner = context.metaData.triggerInputs.triggerEntryDetail['lead-owner'];  const organisationName =  context.metaData.loadedEntries.organisation[0]['company-name']; const contactId = context.metaData.triggerInputs.entryId; const statusValue = JSON.stringify(['77068']); let data = {'3846': organisationName + '' + '-' + '' + 'Sales Project', '4305': JSON.stringify([`${contactId}`]) , '3849': statusValue, '4240': organisation , '4814': industry ,'4815': country, '3845': owner }; return data; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"76758\"\n            }\n        ]\n    }\n]",
            "name": "Create Opportunity from Contacts",
            "custom": "false",
            "recordValueId": 95408,
            "createdAt": "2021-01-11T07:28:39.981Z",
            "updatedAt": "2021-01-11T07:28:39.981Z",
            "autoId": "47",
            "autoIdNum": 47,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get timesheets entries for specific job\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"6643\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const jobID = context.metaData.triggerInputs.triggerEntryDetail.job; return [{'subject':1751,'type':'array','operator':'any_of','value':JSON.parse(jobID)}];}\"\n            }\n        ]\n    },\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get employees entries\",\n        \"name\": \"get entries2\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"199\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"false\"\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){return [{'subject':'3515','type':'checkbox','operator':'is_false','ignoreCase':true}];}\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values\",\n        \"name\": \"Update fields of any entry\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"6641\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const jobID = context.metaData.triggerInputs.triggerEntryDetail.job; return `${JSON.parse(jobID)[0]}`  }\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "[General Consultants] Update Actual Hours, Remaining Hours of Specific jobs according to Timesheets",
            "custom": "false",
            "recordValueId": 94482,
            "createdAt": "2021-01-05T10:11:32.983Z",
            "updatedAt": "2022-06-02T00:22:04.814Z",
            "autoId": "46",
            "autoIdNum": 46,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get timesheets entries for specific job\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"6643\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"fov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const jobID = context.metaData.triggerInputs.entryId; return [{'subject':1751,'type':'array','operator':'any_of','value':[`${jobID}`]}] }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get xero-tax-rate entries for specific job\",\n        \"name\": \"get entries(tax)\",\n        \"condition\": \"function(context){ const taxRateID = context.metaData.loadedEntries.customer[0]['default-tax-rate'];  if(!!taxRateID){ return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"34148\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iv\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const taxRateID = context.metaData.loadedEntries.customer[0]['default-tax-rate']; if(taxRateID) { return [{'subject':3182,'type':'text','operator':'equals','value': taxRateID }] }; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Invoice From Jobs\",\n        \"name\": \"Creating Invoice From Jobs\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const { customer, autoId, } = context.metaData.triggerInputs.triggerEntryDetail; const jobID = context.metaData.triggerInputs.entryId; const loadedEntries = context.metaData.loadedEntries.client[0]; const currencyID = loadedEntries['default-currency'];  let taxRate = (context.state.outputs[1].length && context.state.outputs[1][0] && context.state.outputs[1][0]['effective-tax-rate']) || 0; let subTotal = 0; let taxTotal = 0; let total = 0; context.state.outputs[0].forEach((entry, index) => { let quantity = entry[1752]; let rate = context.metaData.triggerInputs.triggerEntryDetail[ 'hourly-rate' ]; if (!rate) { rate = 0; } let amount = +quantity * +rate; let tax = (taxRate/100)* amount; subTotal += amount; total += (amount+ tax); }); taxTotal = total - subTotal; return { '5154': JSON.stringify([`${jobID}`]), '3225': currencyID, '1309': customer, '1308': context.utils.moment().format('YYYY-MM-DD'), '1316': autoId, '3498': subTotal.toFixed(2), '3499': taxTotal.toFixed(2), '3500': total.toFixed(2), '1317': JSON.stringify(['78932']), '1315': context.utils.moment().add(14, 'days').format('YYYY-MM-DD'), '3223': JSON.stringify(['34122']),  '3228': JSON.stringify(['34946']) }; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"3915\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Subrecord Invoice From Jobs\",\n        \"name\": \"Creating Subrecord Invoice From Jobs\",\n        \"condition\": \"function(context){ console.log(context.state.outputs[0].length,'timesheets'); if(context.state.outputs[0].length > 0) {return true;} }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { console.log(context.state.outputs,context.state.outputs.length,'-------------------'); const parentEntryId = context.state.outputs[2].id; const parentEntry = context.metaData.triggerInputs.triggerEntryDetail; const loadedEntries = context.metaData.loadedEntries.client[0]; console.log(loadedEntries,'le'); let taxRate = (context.state.outputs[1].length && context.state.outputs[1][0] && context.state.outputs[1][0]['effective-tax-rate']) || 0; console.log(taxRate,'tr'); let subrecordEntries =  context.state.outputs[0].map((entry, index) => { let quantity =entry[1986] || entry[1752]; let rate = parentEntry['hourly-rate']; if(!rate) {rate = 0}  let grossAmount = (+quantity * +rate) + (+taxRate/100) * (+quantity * +rate); let amount = (+quantity * +rate);   return { 'parent': ''+parentEntryId, 'index': ''+index, 'quantity': quantity, 'item': entry[1748] || '[]' , 'description': entry[1753] || '', 'rate': parentEntry['hourly-rate'], 'gross-amount' : grossAmount.toFixed(2), 'amount' : amount.toFixed(2), 'account' : loadedEntries['default-sales-account'] || '[]', 'tax-rate' : loadedEntries['default-tax-rate'] || '[]'};}); console.log(subrecordEntries,'se'); return subrecordEntries; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"3916\"\n            }\n        ]\n    }\n]",
            "name": "[General Consultants] Create Invoice from Jobs",
            "custom": "false",
            "recordValueId": 93922,
            "createdAt": "2020-12-22T13:46:04.501Z",
            "updatedAt": "2023-02-04T09:42:25.332Z",
            "autoId": "45",
            "autoIdNum": 45,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get owner's entries\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"4629\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){const clientId = context.metaData.triggerInputs.triggerEntryDetail.client; return [{'subject':1385,'type':'array','operator':'any_of','value':JSON.parse(clientId)}];}\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values\",\n        \"name\": \"Update fields of any entry\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"4576\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const clientEntryId = context.metaData.triggerInputs.triggerEntryDetail.client; return JSON.parse(clientEntryId)[0];}\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "Get All Appointment Entries For Specific Client And Update the last appointment field on Clients",
            "custom": "false",
            "recordValueId": 93116,
            "createdAt": "2020-12-17T03:37:08.111Z",
            "updatedAt": "2020-12-17T03:37:08.111Z",
            "autoId": "44",
            "autoIdNum": 44,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create customer from opportunity.\",\n        \"name\": \"Convert opp to customer\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const { triggerEntryDetail } = context.metaData.triggerInputs; const salesRep = triggerEntryDetail['sales-rep']; firstName = triggerEntryDetail['first-name']; const lastName = triggerEntryDetail['last-name']; const fullName = triggerEntryDetail['full-name']; const email = triggerEntryDetail['email']; const phone = triggerEntryDetail['phone']; const message = triggerEntryDetail['message']; const value = { 'first-name': firstName, 'last-name': lastName, 'name': fullName, email, phone, message, 'sales-representative': salesRep}; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"6629\" \n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    },\n  \t{\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"test update entry after submit button\",\n        \"name\": \"test update entry\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return { '3095': `[\\\"${context.state.outputs[0].id}\\\"]`};}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "Demo Consultant Convert Opp -> Customer",
            "custom": "false",
            "recordValueId": 92871,
            "createdAt": "2020-12-16T01:07:44.625Z",
            "updatedAt": "2020-12-16T01:07:44.625Z",
            "autoId": "43",
            "autoIdNum": 43,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create opportunity from enquiry.\",\n        \"name\": \"Convert enquiry to opportunity\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const value = { '3100': JSON.stringify(['80362']), '3096': context.metaData.triggerInputs.triggerEntryDetail['message'], '5262': JSON.stringify([`${context.metaData.triggerInputs.entryId}`]), '3095': context.metaData.triggerInputs.triggerEntryDetail['customer']}; console.log(value,'v'); return value;  } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"33149\" \n            }\n        ]\n    }\n]",
            "name": "Demo Consultant Convert Enquiry -> Opportunity",
            "custom": "false",
            "recordValueId": 92865,
            "createdAt": "2020-12-16T00:49:11.667Z",
            "updatedAt": "2020-12-16T00:49:11.667Z",
            "autoId": "42",
            "autoIdNum": 42,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create customer from enquiry.\",\n        \"name\": \"Convery enquiry to customer\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const { triggerEntryDetail } = context.metaData.triggerInputs; const firstName = triggerEntryDetail['first-name']; const lastName = triggerEntryDetail['last-name']; const fullName = triggerEntryDetail['full-name']; const email = triggerEntryDetail['email']; const phone = triggerEntryDetail['phone']; const leadOwner = triggerEntryDetail['lead-owner']; const family = triggerEntryDetail['family']; const value = { 'first-name': firstName, 'last-name': lastName, 'full-name': fullName, email, phone, family, 'lead-owner': leadOwner}; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"91013\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "BACS Convert Enquiry -> Client",
            "custom": "false",
            "recordValueId": 92339,
            "createdAt": "2020-12-14T00:37:08.137Z",
            "updatedAt": "2020-12-14T00:37:08.137Z",
            "autoId": "41",
            "autoIdNum": 41,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"APPOINTMENT\",\n        \"description\": \"register email and sms jobs to scheduler\",\n        \"name\": \"register email and sms jobs to scheduler (dietitians)\",\n        \"inputs\": [\n            {\n                \"name\": \"action\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if ( ['startup','before_add','after_add'].includes(context.metaData.triggerType) ) return 'ADD';if ( ['before_edit','after_edit'].includes(context.metaData.triggerType) ) return 'EDIT';if ( ['before_delete','after_delete'].includes(context.metaData.triggerType) ) return 'DELETE';}\"\n            },\n            {\n                \"name\": \"appointmentId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if (context.metaData.triggerConfig.bulkExecution == true) { return context.metaData.triggerInputs.entry.recordValueId;} else {return context.metaData.triggerInputs.entryId;} }\"\n            },\n            {\n                \"name\": \"emailReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 84389\n            },\n            {\n                \"name\": \"smsReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 84390\n            },\n            {\n                \"name\": \"defaultEmailReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 85011\n            },\n            {\n                \"name\": \"defaultSMSReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 85013\n            }\n        ]\n    }\n]",
            "name": "[SCHEDULER] Send Notifications (SHT)",
            "custom": "false",
            "recordValueId": 84391,
            "createdAt": "2020-11-13T02:32:32.252Z",
            "updatedAt": "2020-11-13T02:32:32.252Z",
            "autoId": "40",
            "autoIdNum": 40,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [\n                    {\n                        \"type\": \"dynamic\",\n                        \"phone\": \"crs-claim.phone\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let triggerConfigTemplate; let triggerInputTemplate; try { triggerConfigTemplate = context.metaData.triggerConfig.inputs.find( (config) => { return config.name === 'templateId'; } ).value; } catch (e) {} try { triggerInputTemplate = context.metaData.triggerInputs.templateId; } catch (e) {} return triggerConfigTemplate || triggerInputTemplate; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const res = context.state.outputs[0].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.client.recordValueId; const clientRecordId = context.state.outputs[0].context.client.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "[REMINDER] Send Reminder Sms (SHT)",
            "custom": "false",
            "recordValueId": 84388,
            "createdAt": "2020-11-13T02:20:39.631Z",
            "updatedAt": "2020-11-13T02:20:39.631Z",
            "autoId": "39",
            "autoIdNum": 39,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send scheduled email\",\n        \"name\": \"Send scheduled email\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"type\": \"hard-coded\",\n                    \"name\": \"Clevero Notifications\",\n                    \"address\": \"notifications@mailvero.com\"\n                }\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [\n                    {\n                        \"type\": \"dynamic\",\n                        \"address\": \"crs-claim.email\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let triggerConfigTemplate; let triggerInputTemplate; try { triggerConfigTemplate = context.metaData.triggerConfig.inputs.find( (config) => { return config.name === 'templateId'; } ).value; } catch (e) {} try { triggerInputTemplate = context.metaData.triggerInputs.templateId; } catch (e) {} return triggerConfigTemplate || triggerInputTemplate; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save email into the emails record\",\n        \"name\": \"Save email into the emails record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15169\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.client.recordValueId; const clientRecordId = context.state.outputs[0].context.client.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "[REMINDER] Send Reminder Email (SHT)",
            "description": "",
            "custom": "false",
            "recordValueId": 84387,
            "createdAt": "2020-11-13T02:19:00.588Z",
            "updatedAt": "2021-12-05T11:05:22.563Z",
            "autoId": "38",
            "autoIdNum": 38,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send email\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordId; }\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return context.metaData.triggerInputs.entry.recordValueId; }\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"trigger-config\",\n        \"value\": \"from\"\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"trigger-config\",\n        \"value\": \"to\"\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"trigger-config\",\n        \"value\": \"templateId\"\n      }\n    ]\n  }\n]",
            "name": "[GENERIC SCHEDULED TEMPLATE ID] Send Email",
            "custom": "false",
            "recordValueId": 84371,
            "createdAt": "2020-11-13T01:13:03.570Z",
            "updatedAt": "2020-11-13T01:13:03.570Z",
            "autoId": "37",
            "autoIdNum": 37,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"APPOINTMENT\",\n        \"description\": \"register email and sms jobs to scheduler\",\n        \"name\": \"register email and sms jobs to scheduler\",\n        \"inputs\": [\n            {\n                \"name\": \"action\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if ( ['startup','before_add','after_add'].includes(context.metaData.triggerType) ) return 'ADD';if ( ['before_edit','after_edit'].includes(context.metaData.triggerType) ) return 'EDIT';if ( ['before_delete','after_delete'].includes(context.metaData.triggerType) ) return 'DELETE';}\"\n            },\n            {\n                \"name\": \"appointmentId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if (context.metaData.triggerConfig.bulkExecution == true) { return context.metaData.triggerInputs.entry.recordValueId;} else {return context.metaData.triggerInputs.entryId;} }\"\n            },\n            {\n                \"name\": \"emailReminderTriggerId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"emailReminderTriggerId\"\n            },\n            {\n                \"name\": \"smsReminderTriggerId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"smsReminderTriggerId\"\n            },\n            {\n                \"name\": \"defaultEmailReminderTemplateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"defaultEmailReminderTemplateId\"\n            },\n            {\n                \"name\": \"defaultSMSReminderTemplateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"defaultSMSReminderTemplateId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC/SCHEDULER] Appointment Email And Sms Notification",
            "custom": "false",
            "recordValueId": 84271,
            "createdAt": "2020-11-12T07:36:23.243Z",
            "updatedAt": "2020-11-12T07:36:23.243Z",
            "autoId": "36",
            "autoIdNum": 36,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Task For Handover.\",\n    \"name\": \"Task For Handover\",\n    \"condition\": \"function(context){ return context.metaData.triggerInputs.triggerEntryDetail.status === '[\\\"17683\\\"]' }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"current-user\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"hard-coded\",\n            \"address\": \"lez.yeoh@suitescale.com\"\n          },\n          {\n            \"type\": \"hard-coded\",\n            \"address\": \"ladyaufrey@suitescale.com\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 80357; }\"\n      }\n    ]\n  }\n]",
            "name": "Send Email To Lez and ladyaufrey@suitescale.com After Task Is Handed Over (Suitescale)",
            "description": "",
            "custom": "false",
            "recordValueId": 80346,
            "createdAt": "2020-10-22T04:26:52.120Z",
            "updatedAt": "2022-04-06T06:20:21.643Z",
            "autoId": "35",
            "autoIdNum": 35,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[{\"key\":\"UPDATE_ENTRY\",\"description\":\"Update Field Values after Online Submit\",\"name\":\"Update fields of any entry\",\"inputs\":[{\"name\":\"recordId\",\"source\":\"trigger-inputs\",\"value\":\"recordId\"},{\"name\":\"entryId\",\"source\":\"trigger-inputs\",\"value\":\"entryId\"},{\"name\":\"values\",\"source\":\"trigger-config\",\"value\":\"values\"}]}]",
            "name": "Set Status to \"Booked\" when a new appt is booked via online form",
            "custom": "false",
            "recordValueId": 79176,
            "createdAt": "2020-10-14T07:09:14.557Z",
            "updatedAt": "2020-10-14T07:09:14.557Z",
            "autoId": "34",
            "autoIdNum": 34,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[{\"key\":\"UPDATE_ENTRY\",\"description\":\"Update Field Values after Online Submit\",\"name\":\"Update fields of any entry\",\"inputs\":[{\"name\":\"recordId\",\"source\":\"trigger-inputs\",\"value\":\"recordId\"},{\"name\":\"entryId\",\"source\":\"trigger-inputs\",\"value\":\"entryId\"},{\"name\":\"values\",\"source\":\"trigger-config\",\"value\":\"values\"}]}]",
            "name": "Set Full Name (ONLINE_FORMS)",
            "custom": "false",
            "recordValueId": 78838,
            "createdAt": "2020-10-12T05:30:43.792Z",
            "updatedAt": "2020-10-12T05:31:26.706Z",
            "autoId": "33",
            "autoIdNum": 33,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"test update entry after submit button\",\n        \"name\": \"test update entry\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC UPDATE ENTRY/FIELDS]",
            "custom": "false",
            "recordValueId": 77830,
            "createdAt": "2020-10-09T04:24:45.683Z",
            "updatedAt": "2020-10-09T04:24:45.683Z",
            "autoId": "32",
            "autoIdNum": 32,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n      {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const res = context.state.outputs[0].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC SMS FLOW] Send Sms",
            "custom": "false",
            "recordValueId": 77509,
            "createdAt": "2020-10-06T09:36:50.992Z",
            "updatedAt": "2020-10-06T09:36:50.992Z",
            "autoId": "31",
            "autoIdNum": 31,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ console.log('ok'); return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"trigger-config\",\n        \"value\": \"from\"\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"trigger-config\",\n        \"value\": \"to\"\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"trigger-config\",\n        \"value\": \"templateId\"\n      }\n    ]\n  },\n  {\n    \"key\": \"CREATE_ENTRY\",\n    \"description\": \"Save email into the emails record\",\n    \"name\": \"Save email into the emails record\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"values\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\n      },\n      {\n        \"name\": \"recordId\",\n        \"source\": \"hard-coded\",\n        \"value\": \"15169\"\n      }\n    ]\n  },\n  {\n    \"key\": \"CREATE_ENTRY\",\n    \"description\": \"Save relationship\",\n    \"name\": \"Save relationship\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"values\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n      },\n      {\n        \"name\": \"recordId\",\n        \"source\": \"hard-coded\",\n        \"value\": \"15172\"\n      }\n    ]\n  }\n]",
            "name": "[GENERIC TO AND TEMPLATE ID] Send Email",
            "custom": "false",
            "recordValueId": 77499,
            "createdAt": "2020-10-06T08:27:52.137Z",
            "updatedAt": "2021-11-08T11:41:20.207Z",
            "autoId": "30",
            "autoIdNum": 30,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"test update entry after submit button\",\n        \"name\": \"test update entry\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ function getFormData(fieldIdsInString) { const formDataValues = context.metaData.triggerInputs.data.formData.formValues; let extractedFields = {}; for (let data of formDataValues) { if (fieldIdsInString.includes(data.fieldId + '')) { extractedFields[data.fieldId + ''] = data; } } return extractedFields; } const formValues = getFormData(['3900', '3902']); console.log('form values: ', formValues); return { '3904': formValues['3900'].value + \"-\" + formValues['3902'].value }; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[Super-Health] Populate Appointment Name",
            "custom": "false",
            "recordValueId": 77366,
            "createdAt": "2020-10-05T04:37:20.474Z",
            "updatedAt": "2020-10-05T04:37:20.474Z",
            "autoId": "29",
            "autoIdNum": 29,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n   {\n      \"key\":\"SEND_EMAIL\",\n      \"description\":\"Send email\",\n      \"name\":\"Send task email on create\",\n      \"condition\":\"function(context){ return true; }\",\n      \"inputs\":[\n         {\n            \"name\":\"recordId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"recordId\"\n         },\n         {\n            \"name\":\"entryId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"entryId\"\n         },\n         {\n            \"name\":\"from\",\n            \"source\":\"hard-coded\",\n            \"value\":{\n               \"type\":\"hard-coded\",\n               \"name\":\"Clevero Notifications\",\n               \"address\":\"notifications@mailvero.com\"\n            }\n         },\n         {\n            \"name\":\"to\",\n            \"source\":\"hard-coded\",\n            \"value\":[\n               {\n                  \"type\":\"hard-coded\",\n                  \"address\":\"lez@clevero.co\"\n               }\n            ]\n         },\n         {\n            \"name\":\"templateId\",\n            \"source\":\"trigger-config\",\n            \"value\":\"templateId\"\n         }\n      ]\n   }\n]",
            "name": "DEVMODE [GENERIC] Send Email",
            "description": "",
            "custom": "true",
            "recordValueId": 76943,
            "createdAt": "2020-09-30T01:52:23.272Z",
            "updatedAt": "2021-12-05T11:06:18.819Z",
            "autoId": "27",
            "autoIdNum": 27,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    }\n]",
            "name": "DEVMODE [GENERIC] Send SMS",
            "custom": "false",
            "recordValueId": 76942,
            "createdAt": "2020-09-30T01:52:06.188Z",
            "updatedAt": "2020-09-30T01:52:06.188Z",
            "autoId": "26",
            "autoIdNum": 26,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Full Name, CRS NAME\",\n        \"name\": \"Set CRS Claim Fields\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ function getFormData(fieldIdsInString) { const formDataValues = context.metaData.triggerInputs.data.formData.formValues; let extractedFields = {}; for (let data of formDataValues) { if (fieldIdsInString.includes(data.fieldId + \\\"\\\")) { extractedFields[data.fieldId + \\\"\\\"] = data; } } return extractedFields; } const formValues = getFormData([\\\"3592\\\",\\\"3593\\\",\\\"3614\\\"]); return { \\\"3597\\\": formValues[\\\"3592\\\"].value+\\\" \\\"+formValues[\\\"3593\\\"].value, \\\"3655\\\": formValues[\\\"3592\\\"].value+\\\" \\\"+formValues[\\\"3593\\\"].value };}\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            }\n        ]\n    }\n]",
            "name": "[SHT] Update CRS Fields",
            "custom": "false",
            "recordValueId": 76867,
            "createdAt": "2020-09-29T07:30:15.340Z",
            "updatedAt": "2020-09-29T07:30:15.340Z",
            "autoId": "25",
            "autoIdNum": 25,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n   {\n      \"key\":\"SEND_EMAIL\",\n      \"description\":\"Send email\",\n      \"name\":\"Send task email on create\",\n      \"condition\":\"function(context){ return true; }\",\n      \"inputs\":[\n         {\n            \"name\":\"recordId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"recordId\"\n         },\n         {\n            \"name\":\"entryId\",\n            \"source\":\"trigger-inputs\",\n            \"value\":\"entryId\"\n         },\n         {\n            \"name\":\"from\",\n            \"source\":\"hard-coded\",\n            \"value\":{\n               \"type\":\"hard-coded\",\n               \"name\":\"Clevero Notifications\",\n               \"address\":\"notifications@mailvero.com\"\n            }\n         },\n         {\n            \"name\":\"to\",\n            \"source\":\"hard-coded\",\n            \"value\":[\n               {\n                  \"type\":\"dynamic\",\n                  \"address\":\"assigned-to.email\"\n               }\n            ]\n         },\n         {\n            \"name\":\"templateId\",\n            \"source\":\"function\",\n            \"value\":\"function(context){ return 29084; }\"\n         }\n      ]\n   }\n]",
            "name": "[GENERIC] Send Email - 1 action",
            "description": "",
            "custom": "false",
            "recordValueId": 73343,
            "createdAt": "2020-09-22T05:07:04.349Z",
            "updatedAt": "2021-12-05T11:07:09.255Z",
            "autoId": "24",
            "autoIdNum": 24,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"assigned-to.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 72061; }\"\n      }\n    ]\n  }\n]",
            "name": "Send Operational Task Email Notification",
            "description": "",
            "custom": "false",
            "recordValueId": 72064,
            "createdAt": "2020-09-08T02:41:50.700Z",
            "updatedAt": "2021-12-05T11:07:43.762Z",
            "autoId": "23",
            "autoIdNum": 23,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 70310; }\"\n      }\n    ]\n  }\n]",
            "name": "[Consultant] Send Email Notification To Contact",
            "description": "",
            "custom": "false",
            "recordValueId": 70312,
            "createdAt": "2020-08-24T09:08:53.846Z",
            "updatedAt": "2021-12-05T11:08:21.777Z",
            "autoId": "22",
            "autoIdNum": 22,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 71294; }\"\n      }\n    ]\n  }\n]",
            "name": "[Builder] Send Email Notification To Contact",
            "description": "",
            "custom": "false",
            "recordValueId": 71295,
            "createdAt": "2020-09-02T08:35:09.629Z",
            "updatedAt": "2021-12-05T11:09:03.018Z",
            "autoId": "21",
            "autoIdNum": 21,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"hard-coded\",\n            \"address\": \"mark.vida@clevero.co\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 71296; }\"\n      }\n    ]\n  }\n]",
            "name": "[Builder] Send Email Notification To Admin",
            "description": "",
            "custom": "false",
            "recordValueId": 71297,
            "createdAt": "2020-09-02T08:40:24.041Z",
            "updatedAt": "2021-12-05T11:10:10.511Z",
            "autoId": "20",
            "autoIdNum": 20,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@omailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"hard-coded\",\n            \"address\": \"mark.vida@clevero.co\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 71262; }\"\n      }\n    ]\n  }\n]",
            "name": "[Builder] Customer Enquiry Notification",
            "description": "",
            "custom": "false",
            "recordValueId": 71263,
            "createdAt": "2020-09-02T06:59:01.444Z",
            "updatedAt": "2021-12-05T11:11:29.016Z",
            "autoId": "19",
            "autoIdNum": 19,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send appointment email on create\",\n        \"name\": \"Send appointment email on create\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"type\": \"hard-coded\",\n                    \"name\": \"Clevero Notifications\",\n                    \"address\": \"notifications@mailvero.com\"\n                }\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"type\": \"hard-coded\",\n                    \"address\": \"lez@clevero.co\"\n                }\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return 70311; }\"\n            }\n        ]\n    }\n]",
            "name": "[Consultant] Send Email Notification To Admin",
            "description": "",
            "custom": "false",
            "recordValueId": 70313,
            "createdAt": "2020-08-24T09:09:46.110Z",
            "updatedAt": "2021-12-09T08:40:31.637Z",
            "autoId": "18",
            "autoIdNum": 18,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"trainer.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 70051; }\"\n      }\n    ]\n  }\n]",
            "name": "[Personal Trainer] Send Email Notification To Trainer",
            "description": "",
            "custom": "false",
            "recordValueId": 70288,
            "createdAt": "2020-08-24T07:14:00.836Z",
            "updatedAt": "2021-12-05T11:15:47.120Z",
            "autoId": "17",
            "autoIdNum": 17,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"client.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 35765; }\"\n      }\n    ]\n  }\n]",
            "name": "[Personal Trainer] Send Email Notification To Client",
            "description": "",
            "custom": "false",
            "recordValueId": 70287,
            "createdAt": "2020-08-24T07:12:35.763Z",
            "updatedAt": "2021-12-05T11:16:18.418Z",
            "autoId": "16",
            "autoIdNum": 16,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifcations\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"hard-coded\",\n            \"address\": \"hello@claimo.com.au\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 70426; }\"\n      }\n    ]\n  }\n]",
            "name": "[Claimo][Compensation Check] Send Email Notification To Admin",
            "description": "",
            "custom": "false",
            "recordValueId": 70430,
            "createdAt": "2020-08-25T03:05:26.182Z",
            "updatedAt": "2021-12-05T11:17:35.507Z",
            "autoId": "15",
            "autoIdNum": 15,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"practitioner.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 70050; }\"\n      }\n    ]\n  }\n]",
            "name": "[Psychologist] Send Email Notification To Practitioner",
            "description": "",
            "custom": "false",
            "recordValueId": 70275,
            "createdAt": "2020-08-24T06:13:16.315Z",
            "updatedAt": "2021-12-05T11:18:05.268Z",
            "autoId": "14",
            "autoIdNum": 14,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"client.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 68092; }\"\n      }\n    ]\n  }\n]",
            "name": "[Psychologist] Send Email Notification To Client",
            "description": "",
            "custom": "false",
            "recordValueId": 70274,
            "createdAt": "2020-08-24T06:11:34.314Z",
            "updatedAt": "2021-12-05T11:19:08.715Z",
            "autoId": "13",
            "autoIdNum": 13,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 92785; }\"\n      }\n    ]\n  }\n]",
            "name": "[Consultant] Customer Enquiry Notification",
            "description": "",
            "custom": "false",
            "recordValueId": 70080,
            "createdAt": "2020-08-22T02:29:41.434Z",
            "updatedAt": "2021-12-05T11:20:26.122Z",
            "autoId": "12",
            "autoIdNum": 12,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"practitioner.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 32319; }\"\n      }\n    ]\n  }\n]\n",
            "name": "[Dietitian] Send Email Notification To Practitioner",
            "description": "",
            "custom": "false",
            "recordValueId": 70205,
            "createdAt": "2020-08-24T02:40:39.578Z",
            "updatedAt": "2021-12-05T11:20:56.969Z",
            "autoId": "11",
            "autoIdNum": 11,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"client.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 35742; }\"\n      }\n    ]\n  }\n]\n",
            "name": "[Hair Salon] Send Email Notification To Client",
            "description": "",
            "custom": "false",
            "recordValueId": 70217,
            "createdAt": "2020-08-24T03:32:17.286Z",
            "updatedAt": "2021-12-05T11:21:39.465Z",
            "autoId": "10",
            "autoIdNum": 10,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"hairdresser.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 70049; }\"\n      }\n    ]\n  }\n]\n",
            "name": "[Hair Salon] Send Email Notification To Hairdresser",
            "description": "",
            "custom": "false",
            "recordValueId": 70218,
            "createdAt": "2020-08-24T03:33:17.353Z",
            "updatedAt": "2021-12-05T11:22:17.896Z",
            "autoId": "9",
            "autoIdNum": 9,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"client.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 70119; }\"\n      }\n    ]\n  }\n]",
            "name": "[Massage Therapist] Send Email Notification To Client",
            "description": "",
            "custom": "false",
            "recordValueId": 70121,
            "createdAt": "2020-08-23T03:09:17.935Z",
            "updatedAt": "2021-12-05T11:24:14.457Z",
            "autoId": "8",
            "autoIdNum": 8,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send email\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"client.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 31142; }\"\n      }\n    ]\n  }\n]",
            "name": "[Dietitian] Send Email Notification To Client",
            "description": "",
            "custom": "false",
            "recordValueId": 69811,
            "createdAt": "2020-08-19T12:05:38.043Z",
            "updatedAt": "2021-12-05T11:24:41.090Z",
            "autoId": "7",
            "autoIdNum": 7,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_EMAIL\",\n        \"description\": \"Send appointment email on create\",\n        \"name\": \"Send appointment email on create\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"from\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"type\": \"hard-coded\",\n                    \"name\": \"Clevero Notifications\",\n                    \"address\": \"notifications@mailvero.com\"\n                }\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [\n                    {\n                        \"type\": \"dynamic\",\n                        \"address\": \"practitioner.email\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return 70120; }\"\n            }\n        ]\n    }\n]",
            "name": "[Massage Therapist] Send Email Notification To Practitioner",
            "description": "",
            "custom": "false",
            "recordValueId": 32443,
            "createdAt": "2020-07-18T03:11:25.035Z",
            "updatedAt": "2021-12-05T11:25:12.060Z",
            "autoId": "6",
            "autoIdNum": 6,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send appointment email on create\",\n    \"name\": \"Send appointment email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"practitioner.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 32319; }\"\n      }\n    ]\n  }\n]",
            "name": "[Dietitian] Online Form Email Notification",
            "description": "",
            "custom": "false",
            "recordValueId": 32320,
            "createdAt": "2020-07-17T03:51:35.708Z",
            "updatedAt": "2021-12-05T11:25:56.071Z",
            "autoId": "5",
            "autoIdNum": 5,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send task email on create\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"assigned-to.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 23468; }\"\n      }\n    ]\n  }\n]",
            "name": "Consultants - Send initial task email",
            "description": "",
            "custom": "false",
            "recordValueId": 23469,
            "createdAt": "2020-03-09T23:33:57.298Z",
            "updatedAt": "2021-12-05T11:26:33.033Z",
            "autoId": "4",
            "autoIdNum": 4,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"Send task email on create\",\n    \"name\": \"Send task email on create\",\n    \"condition\": \"function(context){ return true; }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"hard-coded\",\n          \"name\": \"Clevero Notifications\",\n          \"address\": \"notifications@mailvero.com\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"assigned-to.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 29084; }\"\n      }\n    ]\n  }\n]",
            "name": "*KALYSYS - Send Config Task Email to Assignee",
            "description": "",
            "custom": "true",
            "recordValueId": 29085,
            "createdAt": "2020-06-09T04:45:21.353Z",
            "updatedAt": "2021-12-05T10:51:52.324Z",
            "autoId": "3",
            "autoIdNum": 3,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {\n    \"key\": \"SEND_EMAIL\",\n    \"description\": \"New task to review.\",\n    \"name\": \"New task to review\",\n    \"condition\": \"function(context){ return context.metaData.triggerInputs.triggerEntryDetail.status === 'For Review' }\",\n    \"inputs\": [\n      {\n        \"name\": \"recordId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"recordId\"\n      },\n      {\n        \"name\": \"entryId\",\n        \"source\": \"trigger-inputs\",\n        \"value\": \"entryId\"\n      },\n      {\n        \"name\": \"from\",\n        \"source\": \"hard-coded\",\n        \"value\": {\n          \"type\": \"current-user\"\n        }\n      },\n      {\n        \"name\": \"to\",\n        \"source\": \"hard-coded\",\n        \"value\": [\n          {\n            \"type\": \"dynamic\",\n            \"address\": \"reviewer.email\"\n          }\n        ]\n      },\n      {\n        \"name\": \"templateId\",\n        \"source\": \"function\",\n        \"value\": \"function(context){ return 79765; }\"\n      }\n    ]\n  }\n]",
            "name": "Send Tasks for Review [Kalysys Config]",
            "description": "",
            "custom": "false",
            "recordValueId": 28784,
            "createdAt": "2020-06-03T07:15:20.835Z",
            "updatedAt": "2022-07-25T11:52:07.077Z",
            "autoId": "2",
            "autoIdNum": 2,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n  {id:\"UPDATE_RECORD\", input:{recordValueId:123, fieldId: 1234, value: \"hello\"}, output:{recordValueId:123, status:200}},\n  {id:\"GENERATE_PDF\", input:{recordValueId:action1.recordValueId, pdfformId:1234}, output:{fileObj: base64String}},\n  {id:\"EMAIL\", input:{to:\"lez@lezyeoh.com\", from:\"blah@blah.com\", emailTemplate: \"5\", subject: \"This is a test\", attachments:[action2.fileObj] }, output:{}}\n]",
            "name": "Test Alert Message",
            "custom": "true",
            "recordValueId": 10507,
            "createdAt": "2019-07-19T01:44:11.898Z",
            "updatedAt": "2019-09-20T07:08:26.685Z",
            "autoId": "1",
            "autoIdNum": 1,
            "internalOwner": 131,
            "formId": 7660,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get specific records\",\n        \"name\": \"get entries of records\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getEntriesRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getEntriesFilter\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryRecordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryEntryId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Get Entries, Update Linked Entry",
            "custom": "false",
            "recordValueId": 151671,
            "createdAt": "2021-08-07T00:37:42.074Z",
            "updatedAt": "2021-08-07T00:40:45.645Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get Member\",\n        \"name\": \"Get Member\",\n        \"condition\": \"function(context){ console.log('here'); return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132157\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ console.log(context.metaData.triggerInputs.triggerEntryDetail.email); return [{'subject':7653,'type':'TEXT','operator':'EQUALS','value':context.metaData.triggerInputs.triggerEntryDetail.email }]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create an entry\",\n        \"name\": \"Generic Create Entry\",\n        \"condition\": \"function(context){ console.log('step1', JSON.stringify(context)); return !context.state.outputs[0].length; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const entry = context.metaData.triggerInputs.triggerEntryDetail; return { 'email': entry.email, 'first-name': entry['first-name'], 'last-name': entry['last-name'], 'full-name': entry['first-name'] + ' ' + entry['last-name'] }; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132157\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"-1\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry after Member has been created\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ console.log('UPDATE ENTRY', JSON.stringify(context)); return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const outputs = context.state.outputs; console.log('values', JSON.stringify(outputs)); let entryId = outputs[0] && outputs[0].length ? outputs[0][0].recordValueId : outputs[1].id; console.log('entryId',entryId); if (entryId) { return { '7732': JSON.stringify([`${entryId}`]) }; } return {}; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House Enquiry, Search/Create Member",
            "custom": "false",
            "recordValueId": 149199,
            "createdAt": "2021-08-02T10:32:44.636Z",
            "updatedAt": "2021-08-02T10:46:07.984Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get Contact\",\n        \"name\": \"Get Contact\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"140708\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [{'subject':8253,'type':'TEXT','operator':'EQUALS','value':context.metaData.triggerInputs.triggerEntryDetail.email }]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create an entry\",\n        \"name\": \"Generic Create Entry\",\n        \"condition\": \"function(context){ console.log('step1', JSON.stringify(context)); return !context.state.outputs[0].length; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const entry = context.metaData.triggerInputs.triggerEntryDetail; return { 'email': entry.email, 'first-name': entry['first-name'], 'last-name': entry['last-name'], 'full-name': entry['first-name'] + ' ' + entry['last-name'] }; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"140708\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"formId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"-1\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry after Member has been created\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ console.log('UPDATE ENTRY', JSON.stringify(context)); return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const outputs = context.state.outputs; console.log('values', JSON.stringify(outputs)); let entryId = outputs[0] && outputs[0].length ? outputs[0][0].recordValueId : outputs[1].id; console.log('entryId',entryId); if (entryId) { return { '8282': JSON.stringify([`${entryId}`]) }; } return {}; }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House Enquiry, Search/Create Contact ",
            "custom": "false",
            "recordValueId": 141830,
            "createdAt": "2021-07-20T10:48:00.674Z",
            "updatedAt": "2021-07-21T07:54:10.140Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Perform count of associated task entries and update field in deliverable record https://www.github.com/Kalysys/workflow-configs/blob/main/Clevero/Clev-Deliverables/generic.js\",\n        \"name\": \"Perform count of associated task entries and update field in deliverable record\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{}=context.utils,safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,UPDATE_ENTRY}=context.actions;context=metaData.triggerInputs.triggerEntryDetail,context=safeJSONParse(context.deliverable)[0];const associatedTasksForCurrentDeliverable=await GET_ENTRIES({recordId:27103,ignoreLimits:!0,responseType:'iov',filter:[[{subject:'deliverable',requestType:'i',operator:'any_of',type:'array',value:[''+context]}]]});var totalTasksCount=associatedTasksForCurrentDeliverable.length;const completedTaskStatuses=[72060,267914,268053];var completedTasks=associatedTasksForCurrentDeliverable.filter(t=>completedTaskStatuses.includes(+safeJSONParse(t.status)[0])),completedTasks={'total-tasks':totalTasksCount,'tasks-completed':completedTasks.length,'tasks-remaining':totalTasksCount-completedTasks.length,completion:(completedTasks.length/totalTasksCount*100).toFixed(2)};await UPDATE_ENTRY({recordId:590640,entryId:context,mapInternalIdToFieldId:!0,values:completedTasks})}\"\n            }\n        ]\n    }\n]",
            "name": "Perform count of associated task entries and update field in deliverable record",
            "custom": "true",
            "recordValueId": 620466,
            "createdAt": "2022-05-16T05:34:36.085Z",
            "updatedAt": "2022-05-16T05:34:36.085Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[]",
            "name": "[TDA] Convert Sale to Job",
            "custom": "false",
            "recordValueId": 655449,
            "createdAt": "2022-06-14T00:14:36.685Z",
            "updatedAt": "2022-06-14T00:14:36.685Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Update remaining capacity of a (course || program || one-off-session)\",\n        \"name\": \"Update remaining capacity.\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'];const idConstants_neighbourhood_house_courses=148796,idConstants_neighbourhood_house_sessions=132159,idConstants_course_statuses_list_Available=148847,idConstants_course_statuses_list_Sold_Out=148849,idConstants_attendance_statuses_list_canceled=793823,courseStatusesListAvailableSTR=idConstants_course_statuses_list_Available+'',courseStatusesListSoldOutSTR=idConstants_course_statuses_list_Sold_Out+'',attendanceStatusesListCanceledSTR=idConstants_attendance_statuses_list_canceled+'';var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,UPDATE_ENTRY,UPDATE_BULK_ENTRIES}=context.actions;context=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.course)[0],metaData=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.session)[0];if(context){const[course]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_courses,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'course'},{internalId:'neighbourhood-house-sessions',linkedFieldInternalId:'course'}],entryIds:[context]});if('true'===course['allow-individual-session-registration']||!0===course['allow-individual-session-registration']){const sessionsSoldoutStatus=[],sessionEntries=course.associations['neighbourhood-house-sessions'];var sessionIds=sessionEntries.map(session=>session.recordValueId+'');const sessionsWithAttendance=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],entryIds:sessionIds});var sessionIds=sessionsWithAttendance.reduce((prev,session)=>{var sessionCapacity=session['session-capacity'];if(!sessionCapacity&&'0'!==sessionCapacity){sessionsSoldoutStatus.push('unknown');const statuses=JSON.stringify([courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':'',statuses:statuses}}}const sessionAttendances=session.associations['neighbourhood-house-attendances'];sessionCapacity=+sessionCapacity-(sessionAttendances?sessionAttendances.length:0)+(sessionAttendances?sessionAttendances.filter(attendance=>attendance.status===JSON.stringify([attendanceStatusesListCanceledSTR])).length:0);let isSoldOut=sessionCapacity<=0?!0:!1;sessionsSoldoutStatus.push(isSoldOut);const statuses=JSON.stringify(isSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':sessionCapacity,statuses:statuses}}},{}),sessionIds=(await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{[idConstants_neighbourhood_house_sessions]:sessionIds}}),sessionsSoldoutStatus.includes(!0)),isCourseSoldOut=sessionsSoldoutStatus.every(isSessionSoldOut=>!0===isSessionSoldOut),isCourseSoldOut=JSON.stringify(isCourseSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{'disallow-bulk-registration':sessionIds,statuses:isCourseSoldOut}})}else{sessionIds=course['course-capacity'];if(sessionIds||'0'===sessionIds){const remainingCapacity=+sessionIds-course.associations['neighbourhood-house-enrolments'].length+course.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment.canceled||'true'===enrolment.canceled).length;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{statuses:statuses}})}else{let statuses=JSON.stringify([courseStatusesListAvailableSTR]);void await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{statuses:statuses}})}}}else{if(!metaData)throw new Error('Couldnot find associated record (Course || Program || One-of-session)');{const[session]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'session'}],entryIds:[metaData]});isCourseSoldOut=session['session-capacity'],sessionIds=session['activity-booking-type'];if(sessionIds&&(isCourseSoldOut||'0'===isCourseSoldOut)){var[context]=await GET_ENTRIES({recordId:141356,ignoreLimits:!0,responseType:'iv',entryIds:safeJSONParse(sessionIds)});if('One Off'===context.value){const EnrolmentCount=session.associations['neighbourhood-house-enrolments'].length,CanceledEnrolmentCount=session.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment.canceled||'true'===enrolment.canceled).length,remainingCapacity=+isCourseSoldOut-EnrolmentCount+CanceledEnrolmentCount;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:metaData,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}}else{let statuses=JSON.stringify([courseStatusesListAvailableSTR]);void await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:metaData,values:{'remaining-capacity':'',statuses:statuses}})}}}}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Course/Program/Session - Update remaining capacity v2",
            "custom": "true",
            "recordValueId": 677299,
            "createdAt": "2022-06-29T18:58:27.378Z",
            "updatedAt": "2023-02-27T05:17:59.717Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get specific activities\",\n        \"name\": \"get entries of activities\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132159\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const session = context.metaData.triggerInputs.triggerEntryDetail['session'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['session'])[0]; if(session){ return [session] }else{ return [] } }\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const course = context.metaData.triggerInputs.triggerEntryDetail['course'] && JSON.parse(context.metaData.triggerInputs.triggerEntryDetail['course'])[0]; return [{'subject':8531,'type':'array','operator':'any_of','value':[`${course}`]}]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_BULK_ENTRIES\",\n        \"description\": \"Create Attendance Record Entries\",\n        \"name\": \"Creating Attendance Record Entries\",\n        \"condition\": \"function(context){ return context.state.outputs[0].length > 0; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { let loadedEntries = context.metaData.loadedEntries; const member = context.metaData.triggerInputs.triggerEntryDetail['member']; const attendances = context.state.outputs[0].map((activity) => { return { 'linked-enrolment': JSON.stringify([ `${context.metaData.triggerInputs.entryId}`, ]), member: member || JSON.stringify([]), activity: JSON.stringify([`${activity.recordValueId}`]) || JSON.stringify([]), 'activity-type': JSON.stringify([ `${loadedEntries.activity[0].recordValueId}`, ]) || JSON.stringify([]), 'attendee-email': loadedEntries.member[0].email, date: context.utils.moment .tz(activity['start-time'], 'Australia/Sydney') .format('YYYY-MM-DD'), duration: activity.duration, status: JSON.stringify([`132839`]), }; }); return attendances; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"132823\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after Submit\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){ return true }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){return {'19554':true}}\"\n            }\n        ]\n    },\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Update remaining capacity of a (course || program || one-off-session)\",\n        \"name\": \"Update remaining capacity.\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'];const idConstants_neighbourhood_house_courses=148796,idConstants_neighbourhood_house_sessions=132159,idConstants_course_statuses_list_Available=148847,idConstants_course_statuses_list_Sold_Out=148849,idConstants_attendance_statuses_list_canceled=793823,courseStatusesListAvailableSTR=idConstants_course_statuses_list_Available+'',courseStatusesListSoldOutSTR=idConstants_course_statuses_list_Sold_Out+'',attendanceStatusesListCanceledSTR=idConstants_attendance_statuses_list_canceled+'';var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,UPDATE_ENTRY,UPDATE_BULK_ENTRIES}=context.actions;context=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.course)[0],metaData=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.session)[0];if(context){const[course]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_courses,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'course'},{internalId:'neighbourhood-house-sessions',linkedFieldInternalId:'course'}],entryIds:[context]});if('true'===course['allow-individual-session-registration']||!0===course['allow-individual-session-registration']){const sessionsSoldoutStatus=[],sessionEntries=course.associations['neighbourhood-house-sessions'];var sessionIds=sessionEntries.map(session=>session.recordValueId+'');const sessionsWithAttendance=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],entryIds:sessionIds});var sessionIds=sessionsWithAttendance.reduce((prev,session)=>{var sessionCapacity=session['session-capacity'];if(!sessionCapacity&&'0'!==sessionCapacity){sessionsSoldoutStatus.push('unknown');const statuses=JSON.stringify([courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':'',statuses:statuses}}}const sessionAttendances=session.associations['neighbourhood-house-attendances'];sessionCapacity=+sessionCapacity-(sessionAttendances?sessionAttendances.length:0)+(sessionAttendances?sessionAttendances.filter(attendance=>attendance.status===JSON.stringify([attendanceStatusesListCanceledSTR])).length:0);let isSoldOut=sessionCapacity<=0?!0:!1;sessionsSoldoutStatus.push(isSoldOut);const statuses=JSON.stringify(isSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':sessionCapacity,statuses:statuses}}},{}),sessionIds=(await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{[idConstants_neighbourhood_house_sessions]:sessionIds}}),sessionsSoldoutStatus.includes(!0)),isCourseSoldOut=sessionsSoldoutStatus.every(isSessionSoldOut=>!0===isSessionSoldOut),statuses=JSON.stringify(isCourseSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{'disallow-bulk-registration':sessionIds,statuses:statuses,'remaining-capacity':isCourseSoldOut?0:''}})}else{sessionIds=course['course-capacity'];if(sessionIds||'0'===sessionIds){var isCourseSoldOut=course.associations['neighbourhood-house-enrolments'].length,CanceledEnrolmentCount=course.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment.canceled||'true'===enrolment.canceled).length,IgnoreEnrolmentCount=course.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment['do-not-create-attendance']||'true'===enrolment['do-not-create-attendance']).length;const remainingCapacity=+sessionIds-isCourseSoldOut+CanceledEnrolmentCount+IgnoreEnrolmentCount;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}else{let statuses=JSON.stringify([courseStatusesListAvailableSTR]);void await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{'remaining-capacity':'',statuses:statuses}})}}}else{if(!metaData)throw new Error('Couldnot find associated record (Course || Program || One-of-session)');{const[session]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'session'}],entryIds:[metaData]});sessionIds=session['session-capacity'],isCourseSoldOut=session['activity-booking-type'];if(isCourseSoldOut&&(sessionIds||'0'===sessionIds)){var[context]=await GET_ENTRIES({recordId:141356,ignoreLimits:!0,responseType:'iv',entryIds:safeJSONParse(isCourseSoldOut)});if('One Off'===context.value){const EnrolmentCount=session.associations['neighbourhood-house-enrolments'].length,CanceledEnrolmentCount=session.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment.canceled||'true'===enrolment.canceled).length,IgnoreEnrolmentCount=session.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment['do-not-create-attendance']||'true'===enrolment['do-not-create-attendance']).length,remainingCapacity=+sessionIds-EnrolmentCount+CanceledEnrolmentCount+IgnoreEnrolmentCount;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:metaData,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}}else{let statuses=JSON.stringify([courseStatusesListAvailableSTR]);void await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:metaData,values:{'remaining-capacity':'',statuses:statuses}})}}}}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Enrolment - Create Course/Program Attendances & Update Remaining Capacity",
            "custom": "true",
            "recordValueId": 677301,
            "createdAt": "2022-06-29T19:05:18.934Z",
            "updatedAt": "2023-08-03T13:48:12.704Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Generic handler to sum amount field of all transaction\",\n        \"name\": \"Generic handler to sum amount field of all transaction\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'],{}=context.utils;const{GET_ENTRIES,UPDATE_ENTRY}=context.actions;context=((jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}})(metaData.triggerInputs.triggerEntryDetail['linked-enrolment'])[0];if(context){const[associatedTransactions,[enrolment]]=await Promise.all([GET_ENTRIES({recordId:132358,filter:[[{subject:'linked-enrolment',requestType:'i',type:'array',operator:'any_of',value:[''+context]}]],responseType:'iov'}),GET_ENTRIES({recordId:676915,responseType:'iov',entryIds:[''+context]})]);metaData=associatedTransactions.reduce((agg,value)=>+agg+ +value.amount,0),context=+enrolment.amount;await UPDATE_ENTRY({recordId:enrolment.recordId,entryId:enrolment.recordValueId,mapInternalIdToFieldId:!0,values:{'amount-remaining':(context-metaData).toFixed(2)}})}}\"\n            }\n        ]\n    }\n]",
            "name": "[NH] Calculate amount remaining for linked enrolment ",
            "custom": "false",
            "recordValueId": 679766,
            "createdAt": "2022-06-30T12:57:51.546Z",
            "updatedAt": "2022-07-03T02:23:10.415Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Updates the enrolment entry to canceled and it's associated attendances' status. Updates the remaining capacity respectively.\",\n        \"name\": \"Cancel Enrolment & Update capacity\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'];const idConstants_neighbourhood_house_enrolments=676915,idConstants_neighbourhood_house_attendances=132823,idConstants_neighbourhood_house_courses=148796,idConstants_neighbourhood_house_sessions=132159,idConstants_course_statuses_list_Available=148847,idConstants_course_statuses_list_Sold_Out=148849,idConstants_attendance_statuses_list_canceled=793823,idConstants_enrolment_statuses_list_canceled=790448,courseStatusesListAvailableSTR=idConstants_course_statuses_list_Available+'',courseStatusesListSoldOutSTR=idConstants_course_statuses_list_Sold_Out+'',attendanceStatusesListListCanceledSTR=idConstants_attendance_statuses_list_canceled+'';var enrolmentStatusesListListCanceledSTR=idConstants_enrolment_statuses_list_canceled+'',safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,UPDATE_ENTRY,UPDATE_BULK_ENTRIES}=context.actions;var context=metaData.triggerInputs.entryId,[enrolments]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_enrolments,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'linked-enrolment'}],entryIds:[context]});const associatedAttendances=enrolments.associations['neighbourhood-house-attendances'];if(associatedAttendances){const attendanceIds=associatedAttendances.map(({recordValueId})=>recordValueId);enrolments=attendanceIds.reduce((prev,attendanceId)=>({...prev,[attendanceId]:{status:JSON.stringify([attendanceStatusesListListCanceledSTR])}}),{}),enrolments=(await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{[idConstants_neighbourhood_house_attendances]:enrolments}}),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_enrolments,entryId:context,values:{canceled:!0,'enrolment-status':JSON.stringify([enrolmentStatusesListListCanceledSTR])}}),safeJSONParse(metaData.triggerInputs.triggerEntryDetail.course)[0]),enrolmentStatusesListListCanceledSTR=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.session)[0];if(enrolments){const[course]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_courses,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'course'},{internalId:'neighbourhood-house-sessions',linkedFieldInternalId:'course'}],entryIds:[enrolments]});if('true'===course['allow-individual-session-registration']||!0===course['allow-individual-session-registration']){const sessionsSoldoutStatus=[],sessionEntries=course.associations['neighbourhood-house-sessions'];metaData=sessionEntries.map(session=>session.recordValueId+'');const sessionsWithAttendance=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],entryIds:metaData});var metaData=sessionsWithAttendance.reduce((prev,session)=>{var sessionCapacity=session['session-capacity'];if(!sessionCapacity&&'0'!==sessionCapacity){sessionsSoldoutStatus.push('unknown');const statuses=JSON.stringify([courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':'',statuses:statuses}}}const sessionAttendances=session.associations['neighbourhood-house-attendances'];sessionCapacity=+sessionCapacity-(sessionAttendances?sessionAttendances.length:0)+(sessionAttendances?sessionAttendances.filter(attendance=>attendance.status===JSON.stringify([attendanceStatusesListListCanceledSTR])).length:0);let isSoldOut=sessionCapacity<=0?!0:!1;sessionsSoldoutStatus.push(isSoldOut);const statuses=JSON.stringify(isSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':sessionCapacity,statuses:statuses}}},{}),metaData=(await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{[idConstants_neighbourhood_house_sessions]:metaData}}),sessionsSoldoutStatus.includes(!0)),isCourseSoldOut=sessionsSoldoutStatus.every(isSessionSoldOut=>!0===isSessionSoldOut),statuses=JSON.stringify(isCourseSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:enrolments,values:{'disallow-bulk-registration':metaData,statuses:statuses,'remaining-capacity':isCourseSoldOut?0:''}})}else{metaData=course['course-capacity'];if(!metaData&&'0'!==metaData){let statuses=JSON.stringify([courseStatusesListAvailableSTR]);return await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:enrolments,values:{'remaining-capacity':'',statuses:statuses}}),{entryId:context}}const remainingCapacity=+metaData-course.associations['neighbourhood-house-enrolments'].length+course.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment.canceled||'true'===enrolment.canceled).length+course.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment['do-not-create-attendance']||'true'===enrolment['do-not-create-attendance']).length;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:enrolments,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}}else{if(!enrolmentStatusesListListCanceledSTR)throw new Error('Couldnot find associated record (Course || Program || One-of-session)');{const[session]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'session'}],entryIds:[enrolmentStatusesListListCanceledSTR]});isCourseSoldOut=session['session-capacity'],metaData=session['activity-booking-type'];if(!metaData||!isCourseSoldOut&&'0'!==isCourseSoldOut){let statuses=JSON.stringify([courseStatusesListAvailableSTR]);return await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:enrolmentStatusesListListCanceledSTR,values:{'remaining-capacity':'',statuses:statuses}}),{entryId:context}}var[enrolments]=await GET_ENTRIES({recordId:141356,ignoreLimits:!0,responseType:'iv',entryIds:safeJSONParse(metaData)});if('One Off'!==enrolments.value)return{entryId:context};const EnrolmentCount=session.associations['neighbourhood-house-enrolments'].length,CanceledEnrolmentCount=session.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment.canceled||'true'===enrolment.canceled).length,IgnoreEnrolmentCount=session.associations['neighbourhood-house-enrolments'].filter(enrolment=>!0===enrolment['do-not-create-attendance']||'true'===enrolment['do-not-create-attendance']).length,remainingCapacity=+isCourseSoldOut-EnrolmentCount+CanceledEnrolmentCount+IgnoreEnrolmentCount;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:enrolmentStatusesListListCanceledSTR,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}}}return{entryId:context}}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Cancel Enrolment and Update capacity",
            "custom": "true",
            "recordValueId": 685200,
            "createdAt": "2022-07-06T15:20:17.057Z",
            "updatedAt": "2023-08-03T12:21:45.444Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Update Remaining Capacity only if it's a session of a course/program, On Attendace delete\",\n        \"name\": \"Update Session Capacity on Attendance delete\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'],idConstants={'neighbourhood-house-courses':148796,'neighbourhood-house-sessions':132159,'course-statuses-list-Available':148847,'course-statuses-list-Sold-Out':148849},courseStatusesListAvailableSTR=idConstants['course-statuses-list-Available']+'',courseStatusesListSoldOutSTR=idConstants['course-statuses-list-Sold-Out']+'';const attendanceStatusesListListCanceledSTR=idConstants['attendance-statuses-list-canceled']+'';var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,UPDATE_ENTRY}=context.actions,currentAttendanceEntryId=metaData.triggerInputs.entryId;var context=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.activity)[0],[metaData]=await GET_ENTRIES({recordId:idConstants['neighbourhood-house-sessions'],ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],entryIds:[context]}),[safeJSONParse]=safeJSONParse(metaData.course),sessionCapacity=metaData['session-capacity'];const sessionAttendances=metaData.associations['neighbourhood-house-attendances'];if(sessionAttendances&&safeJSONParse&&sessionCapacity){var[metaData]=await GET_ENTRIES({recordId:idConstants['neighbourhood-house-courses'],ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-enrolments',linkedFieldInternalId:'course'},{internalId:'neighbourhood-house-sessions',linkedFieldInternalId:'course'}],entryIds:[safeJSONParse]});if('false'!==metaData['allow-individual-session-registration']&&!1!==metaData['allow-individual-session-registration']){safeJSONParse=sessionAttendances.filter(({recordValueId})=>recordValueId+''!=currentAttendanceEntryId+''),metaData=sessionAttendances?sessionAttendances.filter(attendance=>attendance.status===JSON.stringify([attendanceStatusesListListCanceledSTR])).length:0;let sessionRemainingCapacity=sessionCapacity-safeJSONParse.length+metaData,isSoldOut=!1;sessionRemainingCapacity<=0&&(sessionRemainingCapacity=0,isSoldOut=!0);sessionCapacity=JSON.stringify(isSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants['neighbourhood-house-sessions'],entryId:context,values:{'remaining-capacity':sessionRemainingCapacity,statuses:sessionCapacity}})}}}\"\n            }\n        ]\n    }\n]",
            "name": "Update session capacity on Attendance delete",
            "custom": "true",
            "recordValueId": 685219,
            "createdAt": "2022-07-06T17:03:10.045Z",
            "updatedAt": "2023-08-03T11:47:20.858Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Ability to choose who the email workflow is sent to - (Participant, Facilitator, Volunteer, or External Contacts), This will need to refer to the chosen recipient's email record. Field- SEND EMAIL, if checked (yes) reminder or cancelation to be set when based on 1 day prior to session, will require parameters based on session dates. https://www.github.com/Kalysys/workflow-configs/blob/main/Neighbourhood%20Houses/Send%20notification%20for%20Registration%20&%20Cancellation/generic.js\",\n        \"name\": \"Reminder and Cancellation email workflow\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{moment,_}=context.utils,idConstants_neighbourhood_house_time_tracking=153049,idConstants_reminder_recipient_list_Participants=172514,idConstants_reminder_recipient_list_Facilitator=172515,idConstants_reminder_recipient_list_Volunteers=172516,idConstants_neighbourhood_house_members=132157,idConstants_neighbourhood_house_instructors=132161,idConstants_employees=199,idConstants_email=15169,idConstants_relationship=15172;var updateSessionCancelationField=()=>UPDATE_ENTRY({recordId:currentSessionRecordId,entryId:currentSessionId,mapInternalIdToFieldId:!0,values:{'cancelation-communication-sent':!0}});const safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};var log=({msg,data=null,e=null,type='DEBUG',user=_.get(metaData,'user.email',''),role=metaData.owner,customer=_.get(metaData,'customer.recordValueId','')})=>{console.log(`[${moment().format('LLLL')}]-[${type}]-[USER: ${user||''}]-[ROLE:${role||''}]-[CUSTOMER: ${customer||''}]-[WORKFLOW]-[${msg||''}]-[${e?e.message:''}]`,data)};const{CREATE_ENTRY,GET_ENTRIES,SEND_EMAIL,UPDATE_ENTRY}=context.actions,triggerConfigInputs=metaData.triggerConfig.inputs||[];context=metaData.triggerInputs.entry;const currentSessionId=context.recordValueId,currentSessionRecordId=context.recordId;var[context]=await GET_ENTRIES({recordId:currentSessionRecordId,entryIds:[currentSessionId],responseType:'iov',ignoreLimits:!0,associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],loadSubrecords:!0,subrecordId:idConstants_neighbourhood_house_time_tracking});let activeEmailTemplateId;if(!(activeEmailTemplateId='true'===context['session-cancelled']&&'true'===context['send-email']?triggerConfigInputs.find(input=>'cancelationTemplateId'===input.name)?.value:triggerConfigInputs.find(input=>'reminderTemplateId'===input.name)?.value))return log({msg:'NHH Cancellation Notification WF Cancelled - Conditions were not met'});const sessionReminderRecipients=context['reminder-recipients']||[];var hasParticipantsSelected=sessionReminderRecipients.includes(idConstants_reminder_recipient_list_Participants),hasFacilitatorSelected=sessionReminderRecipients.includes(idConstants_reminder_recipient_list_Facilitator);log({msg:'NHH Cancellation Notification WF - Selected Recipients Types',data:{hasParticipantsSelected:hasParticipantsSelected,hasFacilitatorSelected:hasFacilitatorSelected,hasVolunteersSelected:sessionReminderRecipients.includes(idConstants_reminder_recipient_list_Volunteers)}});let recipientsEmailCollection={participantEmails:[],employeeEmail:[],memberParticipantsEmails:[]};if(hasParticipantsSelected){const attendancesEntries=context.associations['neighbourhood-house-attendances'];if(attendancesEntries){hasParticipantsSelected=attendancesEntries.map(entry=>safeJSONParse(entry.member)[0]).filter(participantId=>!!participantId);const participantEntries=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_members,entryIds:_.uniq(hasParticipantsSelected),responseType:'iov',ignoreLimits:!0}),participantEmails=participantEntries.map(entry=>entry.email).filter(email=>!!email);recipientsEmailCollection.participantEmails=[...participantEmails]}}if(hasFacilitatorSelected){hasParticipantsSelected=safeJSONParse(context.instructor)[0];if(hasParticipantsSelected){var[hasFacilitatorSelected]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_instructors,entryIds:[hasParticipantsSelected],responseType:'iov',ignoreLimits:!0}),context=safeJSONParse(hasFacilitatorSelected.employee)[0];if(context){var[hasParticipantsSelected]=await GET_ENTRIES({recordId:idConstants_employees,entryIds:[context],responseType:'iov',ignoreLimits:!0});const employeeEmail=hasParticipantsSelected.email;employeeEmail&&(recipientsEmailCollection.employeeEmail=[employeeEmail])}}}const{participantEmails,employeeEmail,memberParticipantsEmails}=recipientsEmailCollection,allRecipientEmails=_.uniq([...participantEmails,...employeeEmail,...memberParticipantsEmails]);if(log({msg:'NHH Cancellation Notification WF - Recipients Emails',data:{...recipientsEmailCollection,allRecipientEmails:allRecipientEmails}}),!allRecipientEmails.length)return await updateSessionCancelationField(),log({msg:'NHH Cancellation Notification WF Success - No Recipients Emails Found, No Emails Sent'});var hasFacilitatorSelected=await SEND_EMAIL({recordId:currentSessionRecordId,entryId:currentSessionId,from:{type:'company-settings',name:'name',address:'email'},to:allRecipientEmails.map(email=>({type:'hard-coded',address:email})),templateId:activeEmailTemplateId}),context=(await updateSessionCancelationField(),log({msg:'NHH Cancellation Notification WF Success - Email sent success (1 Day prior session start-date)',data:{emailSentTO:hasFacilitatorSelected.dataPassed.to}}),hasFacilitatorSelected.dataPassed),hasParticipantsSelected=hasFacilitatorSelected.response[0],updateSessionCancelationField=context.from.email,to=context.to,cc=context.cc||[],bcc=context.bcc||[],attachments=context.attachments||[],body=context.body,context=context.subject,date=(new Date).toISOString(),hasParticipantsSelected={2866:hasParticipantsSelected.headers['x-message-id'],2041:updateSessionCancelationField,2040:JSON.stringify(to),2044:JSON.stringify(cc),2045:JSON.stringify(bcc),2867:JSON.stringify(attachments),2043:body,2042:context,2046:date},updateSessionCancelationField=(await CREATE_ENTRY({values:hasParticipantsSelected,recordId:idConstants_email})).id,to=hasFacilitatorSelected.recordId,cc=metaData.triggerInputs.entryId,bcc=metaData.triggerInputs.recordId,attachments=hasFacilitatorSelected.context.recordValueId,body=hasFacilitatorSelected.context.recordId,context={2047:JSON.stringify({linkedEntries:[{recordId:bcc,entryId:cc},{recordId:body,entryId:attachments}],primaryEntry:{recordId:to,entryId:updateSessionCancelationField}})};await CREATE_ENTRY({values:context,recordId:idConstants_relationship}),log({msg:'NHH Cancellation Notification WF - Email Activities Traced Successfully'})}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood Houses - Reminder and Cancellation email workflow",
            "custom": "true",
            "recordValueId": 686072,
            "createdAt": "2022-07-07T05:02:10.045Z",
            "updatedAt": "2022-07-13T11:52:23.826Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"APPOINTMENT\",\n        \"description\": \"register email and sms jobs to scheduler\",\n        \"name\": \"register email and sms jobs to scheduler (dietitians)\",\n        \"inputs\": [\n            {\n                \"name\": \"action\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if ( ['startup','before_add','after_add'].includes(context.metaData.triggerType) ) return 'ADD';if ( ['before_edit','after_edit'].includes(context.metaData.triggerType) ) return 'EDIT';if ( ['before_delete','after_delete'].includes(context.metaData.triggerType) ) return 'DELETE';}\"\n            },\n            {\n                \"name\": \"appointmentId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if (context.metaData.triggerConfig.bulkExecution == true) { return context.metaData.triggerInputs.entry.recordValueId;} else {return context.metaData.triggerInputs.entryId;} }\"\n            },\n            {\n                \"name\": \"emailReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35774\n            },\n            {\n                \"name\": \"smsReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35775\n            },\n            {\n                \"name\": \"defaultEmailReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35765\n            },\n            {\n                \"name\": \"defaultSMSReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35773\n            }\n        ]\n    }\n]",
            "name": "[SCHEDULER] Send notifications (personal trainers)",
            "custom": "false",
            "recordValueId": 35784,
            "createdAt": "2020-08-04T05:29:52.735Z",
            "updatedAt": "2020-08-04T05:29:52.735Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"APPOINTMENT\",\n        \"description\": \"register email and sms jobs to scheduler\",\n        \"name\": \"register email and sms jobs to scheduler\",\n        \"inputs\": [\n            {\n                \"name\": \"action\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if ( ['startup','before_add','after_add'].includes(context.metaData.triggerType) ) return 'ADD';if ( ['before_edit','after_edit'].includes(context.metaData.triggerType) ) return 'EDIT';if ( ['before_delete','after_delete'].includes(context.metaData.triggerType) ) return 'DELETE';}\"\n            },\n            {\n                \"name\": \"appointmentId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if (context.metaData.triggerConfig.bulkExecution == true) { return context.metaData.triggerInputs.entry.recordValueId;} else {return context.metaData.triggerInputs.entryId;} }\"\n            },\n            {\n                \"name\": \"emailReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35756\n            },\n            {\n                \"name\": \"smsReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35757\n            },\n            {\n                \"name\": \"defaultEmailReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35742\n            },\n            {\n                \"name\": \"defaultSMSReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 35746\n            }\n        ]\n    }\n]",
            "name": "[SCHEDULER] Send notifications (hair salon)",
            "custom": "false",
            "recordValueId": 35760,
            "createdAt": "2020-08-04T04:03:17.852Z",
            "updatedAt": "2020-08-04T04:03:17.852Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Create a Subscription entry and map sales and recurring order items into subscription entry\",\n        \"name\": \"Sale-->Subscription\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{UPDATE_ENTRY,GET_ENTRIES,CREATE_BULK_ENTRIES}=context.actions;var context=metaData.triggerInputs.triggerEntryDetail,[recurringOrderData]=(title=context.title||0,console.log('title:',title),await GET_ENTRIES({recordId:context.recordId,entryIds:[context.recordValueId],responseType:'iov',loadSubrecords:!0,subrecordId:709710}));const recurringData=recurringOrderData.subrecordEntries;if(0<recurringData.length){console.log('recurringData:',recurringData);var recurringOrderData=recurringData.map(({total,'billing-frequency':billingFrequency,'invoice-date':invoiceDate},index)=>({'recurring-amount':total,'billing-frequency':billingFrequency,'start-date':invoiceDate,index:index})),valuesToBeUpdated=(console.log('recurringData:',recurringData),{organisation:context.organisation,'linked-sale':JSON.stringify([context.recordValueId]),status:JSON.stringify(['293228'])});const createdSubscriptionEntry=await CREATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,recordId:293214,makeAutoId:!0,values:recurringOrderData});console.log('createdSubscriptionEntry:',createdSubscriptionEntry);var indexData=createdSubscriptionEntry.values.map(data=>data.index),entryId=createdSubscriptionEntry.values.map(data=>data.id);for(let i=0;i<indexData.length;i++){var updatedEntry=await UPDATE_ENTRY({recordId:293214,mapInternalIdToFieldId:!0,values:valuesToBeUpdated,entryId:entryId[i]}),item=(console.log('updatedEntry:',updatedEntry),recurringData[i].item),totalAmount=recurringData[i].total,frequency=safeJSONParse(recurringData[i]['billing-frequency'])[0];const itemData=await GET_ENTRIES({recordId:120475,entryIds:[safeJSONParse(item)[0]],responseType:'iov'});console.log('itemData:',itemData);item=itemData.map(data=>data.name);var totalAmount=function(frequency,totalAmount){switch(''+frequency){case'293217':return 12*totalAmount;case'293218':return totalAmount;case'293219':return 4*totalAmount;default:return totalAmount}}(frequency,totalAmount),mrr=(+totalAmount/12).toFixed(2),invoiceDate=recurringData[i]['invoice-date'],item=await UPDATE_ENTRY({recordId:293214,mapInternalIdToFieldId:!0,values:{description:item,arr:totalAmount,mrr:mrr},entryId:updatedEntry.entryId});console.log('nextUpdatedEntry:',item),0<invoiceDate.length&&0<frequency.length&&(totalAmount=function(invoiceDate,frequency){switch(''+frequency){case'293217':return moment(invoiceDate).add(30,'days').format('YYYY-MM-DD');case'293219':return moment(invoiceDate).add(90,'days').format('YYYY-MM-DD');case'293218':return moment(invoiceDate).add(365,'days');default:return invoiceDate}}(invoiceDate,frequency),mrr=await UPDATE_ENTRY({recordId:293214,mapInternalIdToFieldId:!0,values:{'next-invoice-date':totalAmount},entryId:item.entryId}),console.log('finalupdatedEntry:',mrr))}}}\"\n            }\n        ]\n    }\n]",
            "name": "[Clevero] Sale-->Subscription",
            "custom": "true",
            "recordValueId": 749363,
            "createdAt": "2022-08-16T12:44:54.830Z",
            "updatedAt": "2022-10-18T16:03:47.143Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"On create of project,populating budgeted duration with expected-end-date (minus) expected-start-datehttps://www.github.com/Kalysys/workflow-configs/blob/main/C:\\\\Users\\\\Hp\\\\Documents\\\\GitHub\\\\workflow-configs\\\\kalysys\\\\Projects\\\\generic.js\",\n        \"name\": \"On create of project,populating budgeted duration with expected-end-date (minus) expected-start-date\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const{UPDATE_ENTRY,GET_ENTRIES}=context.actions;var context=metaData.triggerInputs.triggerEntryDetail,expectedStartDate=(console.log('CurrentProject:',context),context['start-date']),expectedEndDate=context['expected-end-date'],expectedEndDate=moment(expectedEndDate).diff(expectedStartDate,'days');console.log('DifferencedData:',expectedEndDate),await GET_ENTRIES({recordId:context.recordId,entryIds:[context.recordValueId],responseType:'iov'});await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'budgeted-duration':expectedEndDate}})}\"\n            }\n        ]\n    }\n]",
            "name": "On create of project,populating budgeted duration with expected-end-date (minus) expected-start-date",
            "custom": "true",
            "recordValueId": 754934,
            "createdAt": "2022-08-21T04:16:21.785Z",
            "updatedAt": "2022-08-21T17:36:17.665Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"On update of status, where status is updated to \\\"Complete\\\" setting actual-end-date to TODAY, and then calculating actual-duration by (actual-end-date - expected-start-date)and also setting duration-difference by (actual-duration - budgeted-duration)https://www.github.com/Kalysys/workflow-configs/blob/main/C:\\\\Users\\\\Bhuwan\\\\Documents\\\\GitHub\\\\workflow-configs\\\\kalysys\\\\Projects-onUpdate\\\\generic.js\",\n        \"name\": \"On update of status, manipulating 'actual-duration' and 'duration-difference' fields.\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const{UPDATE_ENTRY,GET_ENTRIES}=context.actions;var expectedStartDate,budgetedDuration,actualEndDate,context=metaData.triggerInputs.triggerEntryDetail,statusData=((jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}})(context.status)[0];return 102316===statusData||102316==statusData?(statusData=await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'actual-end-date':moment().format('YYYY-MM-DD')}}),[statusData]=await GET_ENTRIES({recordId:context.recordId,entryIds:[statusData.entryId],responseType:'iov'}),expectedStartDate=statusData['start-date'],actualEndDate=statusData['actual-end-date'],statusData['actual-duration'],budgetedDuration=statusData['budgeted-duration'],actualEndDate=moment(actualEndDate).diff(expectedStartDate,'days'),{finalUpdatedEntry:await UPDATE_ENTRY({recordId:context.recordId,entryId:statusData.recordValueId,mapInternalIdToFieldId:!0,values:{'actual-duration':actualEndDate,'duration-difference':actualEndDate-budgetedDuration}})}):void 0}\"\n            }\n        ]\n    }\n]",
            "name": "[Kalysys] On update of status, manipulating 'actual-duration' and 'duration-difference' fields.",
            "custom": "true",
            "recordValueId": 755107,
            "createdAt": "2022-08-21T18:21:36.291Z",
            "updatedAt": "2022-08-26T09:19:50.488Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"APPOINTMENT\",\n        \"description\": \"register email and sms jobs to scheduler\",\n        \"name\": \"register email and sms jobs to scheduler\",\n        \"inputs\": [\n            {\n                \"name\": \"action\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if ( ['startup','before_add','after_add'].includes(context.metaData.triggerType) ) return 'ADD';if ( ['before_edit','after_edit'].includes(context.metaData.triggerType) ) return 'EDIT';if ( ['before_delete','after_delete'].includes(context.metaData.triggerType) ) return 'DELETE';}\"\n            },\n            {\n                \"name\": \"appointmentId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if (context.metaData.triggerConfig.bulkExecution == true) { return context.metaData.triggerInputs.entry.recordValueId;} else {return context.metaData.triggerInputs.entryId;} }\"\n            },\n            {\n                \"name\": \"emailReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31155\n            },\n            {\n                \"name\": \"smsReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31156\n            },\n            {\n                \"name\": \"defaultEmailReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31144\n            },\n            {\n                \"name\": \"defaultSMSReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31146\n            }\n        ]\n    }\n]",
            "name": "[SCHEDULER] Send notifications (massage therapists)",
            "custom": "false",
            "recordValueId": 31158,
            "createdAt": "2020-07-01T02:47:58.787Z",
            "updatedAt": "2020-07-01T02:47:58.787Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"On submit, updating calculation stuffs when task status field is changed\",\r\n        \"name\": \"On submit, updating calculation stuffs when task status field changed\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const{UPDATE_ENTRY,GET_ENTRIES}=context.actions;var updatedEntry,submittedForReview,context=metaData.triggerInputs.triggerEntryDetail,statusData=JSON.parse(context.status);if(27106===statusData||27106==statusData)return updatedEntry=await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'submitted-for-review':moment().format('YYYY-MM-DD'),'rework-needed':!1}}),[updatedEntry]=await GET_ENTRIES({recordId:context.recordId,entryIds:[updatedEntry.entryId],responseType:'iov'}),submittedForReview=updatedEntry['submitted-for-review'],submittedForReview=moment(submittedForReview).diff(updatedEntry['assigned-date'],'days'),{finalEntry:await UPDATE_ENTRY({recordId:context.recordId,entryId:updatedEntry.recordValueId,mapInternalIdToFieldId:!0,values:{'dev-duration':submittedForReview}})};if(72060===statusData||72060==statusData){const updatedEntry=await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'completion-date':moment().format('YYYY-MM-DD')}}),[newEntry]=await GET_ENTRIES({recordId:context.recordId,entryIds:[updatedEntry.entryId],responseType:'iov'}),submittedForReview=newEntry['submitted-for-review'];var completionDate=newEntry['completion-date'];const devDuration=newEntry['dev-duration'];var completionDate=moment(completionDate).diff(submittedForReview,'days'),totalDuration=+completionDate+ +devDuration;const finalEntry=await UPDATE_ENTRY({recordId:context.recordId,entryId:newEntry.recordValueId,mapInternalIdToFieldId:!0,values:{'review-duration':completionDate,'total-duration':totalDuration}});return{finalEntry:finalEntry}}if(27107===statusData||27107==statusData){const finalEntry=await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'rework-needed':!0,'submitted-for-review':'','dev-duration':''}});return{finalEntry:finalEntry}}{const finalEntry=await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'submitted-for-review':'','dev-duration':'','review-duration':'','total-duration':'','completion-date':'','rework-needed':!1}});return{finalEntry:finalEntry}}}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "On submit, updating calculation stuffs when task status field changed",
            "custom": "true",
            "recordValueId": 766317,
            "createdAt": "2022-08-30T08:04:33.753Z",
            "updatedAt": "2023-01-09T19:26:10.840Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"APPOINTMENT\",\n        \"description\": \"register email and sms jobs to scheduler\",\n        \"name\": \"register email and sms jobs to scheduler (dietitians)\",\n        \"inputs\": [\n            {\n                \"name\": \"action\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if ( ['startup','before_add','after_add'].includes(context.metaData.triggerType) ) return 'ADD';if ( ['before_edit','after_edit'].includes(context.metaData.triggerType) ) return 'EDIT';if ( ['before_delete','after_delete'].includes(context.metaData.triggerType) ) return 'DELETE';}\"\n            },\n            {\n                \"name\": \"appointmentId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ if (context.metaData.triggerConfig.bulkExecution == true) { return context.metaData.triggerInputs.entry.recordValueId;} else {return context.metaData.triggerInputs.entryId;} }\"\n            },\n            {\n                \"name\": \"emailReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31154\n            },\n            {\n                \"name\": \"smsReminderTriggerId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31153\n            },\n            {\n                \"name\": \"defaultEmailReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31142\n            },\n            {\n                \"name\": \"defaultSMSReminderTemplateId\",\n                \"source\": \"hard-coded\",\n                \"value\": 31145\n            }\n        ]\n    }\n]",
            "name": "[SCHEDULER] Send notifications (dietitians)",
            "custom": "false",
            "recordValueId": 31157,
            "createdAt": "2020-07-01T02:46:55.027Z",
            "updatedAt": "2020-07-01T02:46:55.027Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Cancel Session & Update it's attendance\",\n        \"name\": \"Cancel Session\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'];const idConstants_neighbourhood_house_attendances=132823,idConstants_neighbourhood_house_sessions=132159,idConstants_attendance_statuses_list_canceled=793823,attendanceStatusesListCanceledSTR=idConstants_attendance_statuses_list_canceled+'';const{GET_ENTRIES,UPDATE_ENTRY,UPDATE_BULK_ENTRIES}=context.actions;var context=metaData.triggerInputs.entryId,[metaData]=(await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:context,values:{'session-cancelled':!0}}),await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],entryIds:[context]}));const sessionAttendances=metaData.associations['neighbourhood-house-attendances'],attendanceIds=sessionAttendances.map(({recordValueId})=>recordValueId);context=attendanceIds.reduce((prev,attendanceId)=>({...prev,[attendanceId]:{status:JSON.stringify([attendanceStatusesListCanceledSTR])}}),{});await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{[idConstants_neighbourhood_house_attendances]:context}})}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Cancel Session",
            "custom": "true",
            "recordValueId": 793887,
            "createdAt": "2022-09-13T06:24:17.847Z",
            "updatedAt": "2022-09-14T05:18:10.266Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"hard-coded\",\n                \"value\": [\n                    {\n                        \"type\": \"dynamic\",\n                        \"phone\": \"client.phone\"\n                    }\n                ]\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ let triggerConfigTemplate; let triggerInputTemplate; try { triggerConfigTemplate = context.metaData.triggerConfig.inputs.find( (config) => { return config.name === 'templateId'; } ).value; } catch (e) {} try { triggerInputTemplate = context.metaData.triggerInputs.templateId; } catch (e) {} return triggerConfigTemplate || triggerInputTemplate; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const res = context.state.outputs[0].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.client.recordValueId; const clientRecordId = context.state.outputs[0].context.client.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    }\n]",
            "name": "[REMINDER] Send reminder SMS",
            "custom": "false",
            "recordValueId": 31149,
            "createdAt": "2020-07-01T02:28:46.203Z",
            "updatedAt": "2020-07-01T02:28:46.203Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"Generate Opportunity from enquiry https://www.github.com/Kalysys/workflow-configs/blob/main/Demo%20Account/Enquiries-Opportunities/generic.js\",\r\n        \"name\": \"Generate Opportunity from enquiry\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],_=context.utils['_'];var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,CREATE_ENTRY,UPDATE_BULK_ENTRIES}=context.actions;var context=metaData.triggerInputs.triggerEntryDetail,[enquiryWithActivities]=(console.log('currentEnquiry: ',context),await GET_ENTRIES({recordId:context.recordId,entryIds:[context.recordValueId],responseType:'iov',associations:[{internalId:'tda-activities',linkedFieldInternalId:'enquiry'}]}));const activities=enquiryWithActivities.associations['tda-activities'];enquiryWithActivities=metaData.triggerInputs.uiValue.values['opportunity-name'],console.log('opportunityName: ',enquiryWithActivities),safeJSONParse={'created-from-enquiry':JSON.stringify([''+context.recordValueId]),'primary-contact':JSON.stringify([''+safeJSONParse(context.contact)[0]]),organisation:JSON.stringify([''+safeJSONParse(context.organisation)[0]]),'enquiry-source':JSON.stringify([''+safeJSONParse(context['enquiry-source'])[0]]),title:enquiryWithActivities};const createdOpportunity=await CREATE_ENTRY({recordId:558991,mapInternalIdToFieldId:!0,values:safeJSONParse});return await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{680041:_.fromPairs(activities.map(activity=>[activity.recordValueId,{opportunity:JSON.stringify([''+createdOpportunity.id])}])),578177:{[context.recordValueId]:{'linked-opportunity':JSON.stringify([''+createdOpportunity.id])}}}}),{createdOpportunity:createdOpportunity}}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[TDA] Generate Opportunity from enquiry",
            "custom": "true",
            "recordValueId": 810836,
            "createdAt": "2022-09-26T04:10:05.113Z",
            "updatedAt": "2022-09-26T04:10:05.113Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"Set name on save of enquiry https://www.github.com/Kalysys/workflow-configs/blob/main/Demo%20Account/Enquiries/generic.js\",\r\n        \"name\": \"Set name on save of enquiry\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],{}=context.utils;const{GET_ENTRIES,UPDATE_ENTRY}=context.actions,currentEnquiry=metaData.triggerInputs.triggerEntryDetail;var context=((jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}})(currentEnquiry.contact)[0],[context]=await GET_ENTRIES({recordId:464250,responseType:'iov',entryIds:[context]}),firstName=context['first-name'],context=context['last-name'];const notes=currentEnquiry.notes.replace(/(<([^>]+)>)/gi,'');var charactersNeeded=100-firstName.length-context.length;console.log('charactersNeeded: ',charactersNeeded),await UPDATE_ENTRY({recordId:currentEnquiry.recordId,entryId:currentEnquiry.recordValueId,mapInternalIdToFieldId:!0,values:{name:firstName+` ${context} - `+notes.slice(0,charactersNeeded)}})}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[TDA] Set name on save of enquiry",
            "custom": "true",
            "recordValueId": 810990,
            "createdAt": "2022-09-26T04:57:40.209Z",
            "updatedAt": "2022-09-26T04:57:40.209Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"GENERIC_HANDLER\",\r\n        \"description\": \"Update contact based on email https://www.github.com/Kalysys/workflow-configs/blob/main/Demo%20Account/Enquiries/Online-form/generic.js\",\r\n        \"name\": \"Update contact based on email\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"handler\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const{GET_ENTRIES,CREATE_ENTRY,UPDATE_ENTRY}=context.actions;var context=metaData.triggerInputs.triggerEntryDetail,email=context.email,[contact]=await GET_ENTRIES({recordId:464250,responseType:'iov',filter:[[{subject:'email',requestType:'i',type:'text',operator:'equals',value:email}]]});if(contact){var{'first-name':firstName,'last-name':lastName,phone}=context;await Promise.all([UPDATE_ENTRY({recordId:464250,entryId:[contact.recordValueId],mapInternalIdToFieldId:!0,values:{'first-name':firstName,'last-name':lastName,'full-name':firstName+' '+lastName,phone:phone}}),UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{contact:JSON.stringify([''+contact.recordValueId]),'date-added':moment().toISOString(),status:JSON.stringify(['578998'])}})])}else{const{'first-name':firstName,'last-name':lastName,phone}=context;contact=await CREATE_ENTRY({recordId:464250,mapInternalIdToFieldId:!0,values:{'first-name':firstName,'last-name':lastName,email:email,'full-name':firstName+' '+lastName,phone:phone}});await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{contact:JSON.stringify([''+contact.id]),'date-added':moment().toISOString(),status:JSON.stringify(['578998'])}})}}\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "[TDA] [ONLINE_FORM] Update contact based on email",
            "custom": "true",
            "recordValueId": 810996,
            "createdAt": "2022-09-26T05:00:20.252Z",
            "updatedAt": "2022-09-26T05:00:20.252Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \" Calculate Days Open = Today - Ticket Submittedhttps://www.github.com/Kalysys/workflow-configs/blob/main/C:\\\\Users\\\\Bhuwan\\\\Documents\\\\GitHub\\\\workflow-configs\\\\kalysys\\\\Scheduled\\\\actions\\\\setOpenDays.js\",\n        \"name\": \"Calculate Days Open = Today - Ticket Submitted\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const UPDATE_ENTRY=context.actions['UPDATE_ENTRY'];var context=metaData.triggerInputs.entry,ticketSubmmited=context['issued-at'],todayDate=moment().toISOString();const daysOpen=+moment(todayDate).diff(ticketSubmmited,'minutes')/1440;todayDate=daysOpen.toFixed(2);await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'days-open':todayDate}})}\"\n            }\n        ]\n    }\n]",
            "name": "[kalysys] Set Open Days",
            "custom": "true",
            "recordValueId": 1161025,
            "createdAt": "2022-11-20T15:06:28.167Z",
            "updatedAt": "2023-01-20T06:44:57.112Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"CONSOLE\",\r\n        \"description\": \"Test console log\",\r\n        \"name\": \"For internal testing\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"message\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"HELLO WORLD\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "console log for internal testing",
            "custom": "true",
            "recordValueId": 1165088,
            "createdAt": "2022-11-21T12:48:11.219Z",
            "updatedAt": "2022-11-21T12:48:11.219Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get entries\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": 148796\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    }\n]",
            "name": "Get course entry ID for redirection",
            "custom": "true",
            "recordValueId": 1408847,
            "createdAt": "2023-01-29T07:42:22.815Z",
            "updatedAt": "2023-01-29T07:44:42.577Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \" Caluculations when status is [Waiting for Customer Approval]\",\n        \"name\": \" Caluculations when status is [Waiting for Customer Approval]\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){const metaData=context.input['__metadata'],moment=context.utils['moment'];const UPDATE_ENTRY=context.actions['UPDATE_ENTRY'];var context=metaData.triggerInputs.entry,today=moment().toISOString(),reviewedAndCompletedDate=context['reviewed-and-completed-date'],reviewedAndCompletedDate=moment(today).diff(reviewedAndCompletedDate,'days'),issuedAt=context['issued-at'],issuedAt=moment(today).diff(issuedAt,'days');await UPDATE_ENTRY({recordId:context.recordId,entryId:context.recordValueId,mapInternalIdToFieldId:!0,values:{'customer-approval-duration':reviewedAndCompletedDate,'customer-approval-date':null,'ticket-closed':today,'closed-duration':issuedAt,status:JSON.stringify(['115758'])}})}\"\n            }\n        ]\n    }\n]",
            "name": "Calculations whenever status is [ Waiting for customer approval ]",
            "custom": "true",
            "recordValueId": 1436800,
            "createdAt": "2023-02-06T03:08:23.231Z",
            "updatedAt": "2023-02-06T03:42:48.010Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get parent course and it's associated sessions\",\n        \"name\": \"Get parent course entry\",\n        \"condition\": \"function(context){ const courseId = context.metaData.triggerInputs.triggerEntryDetail.course; return !!courseId; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"148796\"\n            },\n            {\n                \"name\": \"associations\",\n                \"source\": \"function\",\n                \"value\": \"function(context){return [{'internalId':'neighbourhood-house-sessions','linkedFieldInternalId':'course'}]; }\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const courseId = context.metaData.triggerInputs.triggerEntryDetail.course; return courseId && JSON.parse(courseId); }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_BULK_ENTRIES\",\n        \"description\": \"update the location field (room) for the all other session entries that belongs to the same parent course/program.\",\n        \"name\": \"Update entries location field\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const recordId = context.metaData.triggerInputs.recordId; const associatedEntries = context.state.outputs[0][0].associations['neighbourhood-house-sessions']; const associatedEntryIds = associatedEntries.map(entry=>entry.recordValueId); const newEntriesFieldValue = associatedEntryIds.reduce((prev, entryId)=>({...prev, [entryId]: {'room': context.metaData.triggerInputs.triggerEntryDetail.room}}), {}); return {[recordId]: newEntriesFieldValue}; }\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Session - Update location for Session Entries",
            "custom": "true",
            "recordValueId": 1762739,
            "createdAt": "2023-04-26T09:48:18.274Z",
            "updatedAt": "2023-04-26T09:48:18.274Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"XERO_UPSERT\",\n        \"description\": \"Create or update invoice\",\n        \"name\": \"Create or update invoice\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"xeroTenantId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"organisationId\"\n            },\n            {\n                \"name\": \"xeroDetails\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"correspondingRecordType\": \"invoice\"\n                }\n            },\n            {\n                \"name\": \"xeroEntryData\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ console.log(JSON.stringify(context.metaData)); const entry = context.metaData.triggerInputs.triggerEntryDetail; let xeroContactId; if(context.metaData.loadedEntries.member && context.metaData.loadedEntries.member.length && context.metaData.loadedEntries.member[0]['xero-id']){  xeroContactId = context.metaData.loadedEntries.member[0]['xero-id']; } else{ xeroContactId = context.metaData.loadedEntries.contact[0]['xero-id']; } console.log('xeroContactId', xeroContactId); const invoiceData = { invoiceID: entry['xero-id'] || undefined, type: 'ACCREC', reference:entry.autoId, date: entry['paid-date'], contact: { contactID: xeroContactId || undefined}, lineAmountTypes: 'Inclusive', currencyCode: 'AUD', status: 'DRAFT', lineItems: [{ description: entry.name || entry['payment-reference'], quantity: 1, lineAmount: entry.amount, accountCode: context.metaData.loadedEntries.account[0].code}] }; console.log(JSON.stringify(invoiceData)); return invoiceData; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry with xero information\",\n        \"name\": \"Update entry with xero information\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const xeroInvoice = context.state.outputs[0].data.xero.invoices[0]; return { 'invoice-number': 'https://go.xero.com/AccountsReceivable/Edit.aspx?InvoiceID='+xeroInvoice.invoiceID, 'xero-id': xeroInvoice.invoiceID, 'xero-updated-date-utc': new Date(xeroInvoice.updatedDateUTC).toISOString()}; }\"\n            }\n        ]\n    }\n]\n",
            "name": "[Neighbourhood House] - Xero Sync Invoice",
            "custom": "false",
            "recordValueId": 359283,
            "createdAt": "2022-03-08T10:00:31.535Z",
            "updatedAt": "2022-06-17T07:01:19.862Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Generate QR code for course.\",\n        \"name\": \"Generate QR code for course.\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'];const{GET_ENTRIES,GENERATE_QRCODE,UPDATE_ENTRY}=context.actions;var context=metaData.triggerInputs.recordId,entryId=metaData.triggerInputs.entryId,urlValue=metaData.triggerInputs.triggerEntryDetail.url,metaData=metaData.triggerInputs.triggerEntryDetail['available-online'];urlValue&&'true'===metaData||await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:context,entryId:entryId,values:{'qr-code':''}});let qrCodeLink;var metaData='Generated QR for URL: '+urlValue,[existingQRCode]=await GET_ENTRIES({recordId:225810,responseType:'iov',ignoreLimits:!0,filter:[[{subject:'notes',requestType:'i',type:'text',operator:'equals',value:metaData}]]});qrCodeLink=existingQRCode&&existingQRCode.url?existingQRCode.url:(await GENERATE_QRCODE({message:urlValue,notes:metaData,title:'Generate QR for Program/Course'})).entryData.url,await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:context,entryId:entryId,values:{'qr-code':qrCodeLink}})}\"\n            }\n        ]\n    }\n]",
            "name": "Neighbourhood House - Course/Programs - Generate QR for URL",
            "custom": "true",
            "recordValueId": 2130840,
            "createdAt": "2023-07-13T10:30:09.900Z",
            "updatedAt": "2023-07-13T11:15:53.117Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"name\": \"Document Generator Flow\",\n        \"description\": \"Document Generator Flow\",\n        \"condition\": \"function(context){ return true;}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return true;}\"\n            }    \n        ]\n    }\n]",
            "name": "[GENERIC] Doc Generator",
            "custom": "false",
            "recordValueId": 558135,
            "createdAt": "2022-03-18T03:50:12.448Z",
            "updatedAt": "2022-03-30T21:20:19.714Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": " [\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get specific records\",\n        \"name\": \"get entries of records\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getEntriesRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"filter\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getEntriesFilter\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_BULK_ENTRIES\",\n        \"description\": \"Update Field Values of tasks\",\n        \"name\": \"Update values\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"bulkEntryValues\"\n\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] GET ENTRiES, UPDATE BULK ENTRIES",
            "custom": "false",
            "recordValueId": 341433,
            "createdAt": "2022-03-03T07:18:46.111Z",
            "updatedAt": "2022-03-03T07:19:39.174Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GENERIC_HANDLER\",\n        \"description\": \"Update remaining capacity of a (course || program || one-off-session)\",\n        \"name\": \"Update remaining capacity.\",\n        \"inputs\": [\n            {\n                \"name\": \"handler\",\n                \"source\": \"hard-coded\",\n                \"value\": \"async function(context){var metaData=context.input['__metadata'];const idConstants_neighbourhood_house_courses=148796,idConstants_neighbourhood_house_sessions=132159,idConstants_course_statuses_list_Available=148847,idConstants_course_statuses_list_Sold_Out=148849,courseStatusesListAvailableSTR=idConstants_course_statuses_list_Available+'',courseStatusesListSoldOutSTR=idConstants_course_statuses_list_Sold_Out+'';var safeJSONParse=(jsonStr,defaultVal=[])=>{try{return JSON.parse(jsonStr)}catch(err){return defaultVal}};const{GET_ENTRIES,UPDATE_ENTRY,UPDATE_BULK_ENTRIES}=context.actions;context=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.course)[0],metaData=safeJSONParse(metaData.triggerInputs.triggerEntryDetail.activity)[0];if(context){var[course]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_courses,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-transactions',linkedFieldInternalId:'course'},{internalId:'neighbourhood-house-sessions',linkedFieldInternalId:'course'}],entryIds:[context]});if('true'===course['allow-individual-session-registration']||!0===course['allow-individual-session-registration']){const sessionsSoldoutStatus=[],sessionEntries=course.associations['neighbourhood-house-sessions'];var sessionIds=sessionEntries.map(session=>session.recordValueId+'');const sessionsWithTransaction=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-attendances',linkedFieldInternalId:'activity'}],entryIds:sessionIds});var sessionIds=sessionsWithTransaction.reduce((prev,session)=>{var sessionCapacity=session['session-capacity'];if(!sessionCapacity&&'0'!==sessionCapacity){sessionsSoldoutStatus.push('unknown');const statuses=JSON.stringify([courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':'',statuses:statuses}}}var sessionAttendances=session.associations['neighbourhood-house-attendances'],sessionCapacity=+sessionCapacity-(sessionAttendances?sessionAttendances.length:0);let isSoldOut=sessionCapacity<=0?!0:!1;sessionsSoldoutStatus.push(isSoldOut);const statuses=JSON.stringify(isSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);return{...prev,[session.recordValueId]:{'remaining-capacity':sessionCapacity,statuses:statuses}}},{}),sessionIds=(await UPDATE_BULK_ENTRIES({mapInternalIdToFieldId:!0,values:{[idConstants_neighbourhood_house_sessions]:sessionIds}}),sessionsSoldoutStatus.includes(!0)),isCourseSoldOut=sessionsSoldoutStatus.every(isSessionSoldOut=>!0===isSessionSoldOut),statuses=JSON.stringify(isCourseSoldOut?[courseStatusesListSoldOutSTR]:[courseStatusesListAvailableSTR]);await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{'disallow-bulk-registration':sessionIds,statuses:statuses,'remaining-capacity':isCourseSoldOut?0:''}})}else{sessionIds=course['course-capacity'];if(sessionIds||0===sessionIds){const remainingCapacity=+sessionIds-course.associations['neighbourhood-house-transactions'].length;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_courses,entryId:context,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}}}else{if(!metaData)throw new Error('Couldnot find associated record (Course || Program || One-of-session)');var[isCourseSoldOut]=await GET_ENTRIES({recordId:idConstants_neighbourhood_house_sessions,ignoreLimits:!0,responseType:'iov',associations:[{internalId:'neighbourhood-house-transactions',linkedFieldInternalId:'activity'}],entryIds:[metaData]}),sessionIds=isCourseSoldOut['session-capacity'],course=isCourseSoldOut['activity-booking-type'];if(course&&(sessionIds||0==+sessionIds)){var[context]=await GET_ENTRIES({recordId:141356,ignoreLimits:!0,responseType:'iv',entryIds:safeJSONParse(course)});if('One Off'===context.value){const TransactionCount=isCourseSoldOut.associations['neighbourhood-house-transactions'].length,remainingCapacity=+sessionIds-TransactionCount;let statuses=JSON.stringify([courseStatusesListAvailableSTR]);remainingCapacity<=0&&(statuses=JSON.stringify([courseStatusesListSoldOutSTR])),await UPDATE_ENTRY({mapInternalIdToFieldId:!0,recordId:idConstants_neighbourhood_house_sessions,entryId:metaData,values:{'remaining-capacity':remainingCapacity,statuses:statuses}})}}}}\"\n            }\n        ]\n    }\n]",
            "name": "[CUSTOM] Neighbourhood House - Course/Program/Session - Update Remaining Capacity",
            "custom": "true",
            "recordValueId": 573878,
            "createdAt": "2022-04-06T18:02:55.268Z",
            "updatedAt": "2022-05-31T11:37:48.607Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"Load Member Entry\",\n        \"name\": \"Load Member Entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iv\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){return [context.metaData.triggerInputs.entryId]}\"\n            }\n        ]\n    },\n    {\n        \"key\": \"XERO_UPSERT\",\n        \"description\": \"Create or update contact\",\n        \"name\": \"Create or update contact\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"xeroTenantId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"organisationId\"\n            },\n            {\n                \"name\": \"xeroDetails\",\n                \"source\": \"hard-coded\",\n                \"value\": {\n                    \"correspondingRecordType\": \"contact\"\n                }\n            },\n            {\n                \"name\": \"xeroEntryData\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const guest = context.state.outputs[0][0]; return {contactID: guest['xero-id'] || undefined ,name: guest['full-name'], emailAddress: guest['email']}; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update entry with xero information\",\n        \"name\": \"Update entry with xero information\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ const xeroContact = context.state.outputs[1].data.xero.contacts[0]; return {'xero-id': xeroContact.contactID, 'xero-updated-date-utc': new Date(xeroContact.updatedDateUTC).toISOString()}; }\"\n            }\n        ]\n    }\n]",
            "name": "[Neighbourhood House] - Xero Sync Member",
            "custom": "false",
            "recordValueId": 318959,
            "createdAt": "2022-02-28T00:39:05.946Z",
            "updatedAt": "2022-02-28T00:55:02.643Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"SEND_SMS\",\n        \"description\": \"Send scheduled sms\",\n        \"name\": \"Send scheduled sms\",\n        \"condition\": \"function(context){  return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"to\",\n                \"source\": \"trigger-config\",\n                \"value\": \"phone\"\n            },\n            {\n                \"name\": \"templateId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"templateId\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save SMS into the SMS record\",\n        \"name\": \"Save SMS into the SMS record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const res = context.state.outputs[0].response[0].response; const message = res.body; const messageId = res.sid; const phone = res.to; const dateCreated = res.dateCreated; const value = { '2028': messageId, '2026': message, '2025': phone, '2027': dateCreated.toISOString(), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15131\"\n            }\n        ]\n    },\n    {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Save relationship\",\n        \"name\": \"Save relationship\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId, }, { recordId: clientRecordId, entryId: clientId, }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"15172\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Field Values after SMS and Email is send\",\n        \"name\": \"Update fields of any entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"recordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-inputs\",\n                \"value\": \"entryId\"\n            },\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"values\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Send SMS, Create Relationship, Update Entry",
            "custom": "false",
            "recordValueId": 580762,
            "createdAt": "2022-04-12T02:44:07.019Z",
            "updatedAt": "2022-04-12T04:50:35.739Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"CREATE_CHARGE\",\n        \"description\": \"create charge\",\n        \"name\": \"Create charge\",\n        \"successMsg\":\"function(context){return `Charged $${context.actionResult.chargeResponse.amount} to ${context.actionResult.chargeResponse.card.name}`}\",\n        \"errorMsg\":\"function(context){return 'Something went wrong!'}\",\n        \"condition\": \"function(context){ return true }\",\n        \"inputs\": [\n            {\n                \"name\": \"charge\",\n                \"source\": \"trigger-config\",\n                \"value\": \"chargeInfo\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Create Credit Card Charge Only",
            "custom": "false",
            "recordValueId": 285545,
            "createdAt": "2022-01-28T00:15:49.455Z",
            "updatedAt": "2022-01-28T00:15:49.455Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get order-items\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"successMsg\":\"function(context){return `Successfully Retrieved Order Items`}\",\n        \"errorMsg\":\"function(context){return 'Retrieving Order Items failed'}\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n        {\n        \"key\": \"CREATE_ENTRY\",\n        \"description\": \"Create Project Record\",\n        \"name\": \"Create Project Record\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ try { const saleId = context.metaData.triggerInputs.entryId; const originRecord = context.state.outputs[0][0]; const customerId = originRecord.organisation; const mainContactId = originRecord['main-contact'] || ['']; const title = originRecord.title; const statusId = 131355; const budgetedDuration = ((+originRecord['net-total']) / 100) / 8; const endDateAdd = Math.ceil((+originRecord['net-total']) / 100 * 2 / 40) * 7; return { '5198': customerId, '5196': title, '5528': JSON.stringify([`${statusId}`]), '10921': JSON.stringify([`${saleId}`]), '14252': budgetedDuration, '5197': context.utils.moment().format(\\\"YYYY-MM-DD\\\"), '9626': context.utils.moment().add(endDateAdd, 'd').format(\\\"YYYY-MM-DD\\\")}; } catch (e){ console.log(e); throw e; } }\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"hard-coded\",\n                \"value\": \"99673\"\n            }\n        ]\n    }\n]",
            "name": "[Clevero] Sale -> Project",
            "custom": "true",
            "recordValueId": 282055,
            "createdAt": "2022-01-19T00:39:35.101Z",
            "updatedAt": "2023-03-28T08:19:03.807Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"UPDATE_ENTRY\",\r\n        \"description\": \"Update the UUID field AFTER ADD/EDIT\",\r\n        \"name\": \"update the UUID field after entry edit\",\r\n        \"condition\": \"function(context){ if(!context.metaData.triggerInputs.oldValues) {return true;} else { const currentUniqueId = context.metaData.triggerInputs.oldValues.FieldValues.find(v=>+v.fieldId === 10509); if(currentUniqueId && currentUniqueId.value) {return false;} else {return true;}}}\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"recordId\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"trigger-inputs\",\r\n                \"value\": \"entryId\"\r\n            },\r\n            {\r\n                  \"name\": \"values\",\r\n                  \"source\": \"trigger-config\",\r\n                  \"value\": \"values\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "Generate UUID Code",
            "custom": "true",
            "recordValueId": 259409,
            "createdAt": "2021-12-09T04:23:52.876Z",
            "updatedAt": "2021-12-09T05:13:30.290Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\r\n    {\r\n        \"key\": \"SEND_EMAIL\",\r\n        \"description\": \"Send email\",\r\n        \"name\": \"Send task email on create\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){return context.metaData.triggerInputs.entry.recordId;}\"\r\n            },\r\n            {\r\n                \"name\": \"entryId\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){return context.metaData.triggerInputs.entry.recordValueId;}\"\r\n            },\r\n            {\r\n                \"name\": \"from\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"from\"\r\n            },\r\n            {\r\n                \"name\": \"to\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"to\"\r\n            },\r\n            {\r\n                \"name\": \"templateId\",\r\n                \"source\": \"trigger-config\",\r\n                \"value\": \"templateId\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Save email into the emails record\",\r\n        \"name\": \"Save email into the emails record\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try { const emailSent = context.state.outputs[0].dataPassed; const emailRes = context.state.outputs[0].response[0]; const from = emailSent.from.email; const to = emailSent.to; const cc = emailSent.cc || []; const bcc = emailSent.bcc || []; const attachments = emailSent.attachments || []; const body = emailSent.body; const subject = emailSent.subject; const date = new Date().toISOString(); const messageId = emailRes.headers['x-message-id']; const value = { '2866': messageId, '2041': from, '2040': JSON.stringify(to), '2044': JSON.stringify(cc), '2045': JSON.stringify(bcc), '2867': JSON.stringify(attachments), '2043': body, '2042': subject, '2046': date, }; return value; } catch (e) { console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"15169\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"key\": \"CREATE_ENTRY\",\r\n        \"description\": \"Save relationship\",\r\n        \"name\": \"Save relationship\",\r\n        \"condition\": \"function(context){ return true; }\",\r\n        \"inputs\": [\r\n            {\r\n                \"name\": \"values\",\r\n                \"source\": \"function\",\r\n                \"value\": \"function(context){ try { const primaryEntryId = context.state.outputs[1].id; const primaryRecordId = context.state.outputs[1].recordId; const appointmentId = context.metaData.triggerInputs.entryId; const appointmentRecordId = context.metaData.triggerInputs.recordId; const clientId = context.state.outputs[0].context.recordValueId; const clientRecordId = context.state.outputs[0].context.recordId; const value = { '2047': JSON.stringify({ linkedEntries: [ { recordId: appointmentRecordId, entryId: appointmentId }, { recordId: clientRecordId, entryId: clientId }, ], primaryEntry: { recordId: primaryRecordId, entryId: primaryEntryId, }, }), }; return value; } catch (e) { console.log(e); throw e; } }\"\r\n            },\r\n            {\r\n                \"name\": \"recordId\",\r\n                \"source\": \"hard-coded\",\r\n                \"value\": \"15172\"\r\n            }\r\n        ]\r\n    }\r\n]",
            "name": "Scheduled Email Reminder",
            "custom": "true",
            "recordValueId": 243534,
            "createdAt": "2021-11-08T12:01:58.912Z",
            "updatedAt": "2021-11-08T12:01:58.912Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": "[\n    {\n        \"key\": \"UPDATE_ENTRY\",\n        \"description\": \"Update Entry Data\",\n        \"name\": \"test update entry\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryValues\"\n            },\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryRecordId\"\n            },\n            {\n                \"name\": \"entryId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"updateEntryEntryId\"\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] Update Entry",
            "custom": "false",
            "recordValueId": 155402,
            "createdAt": "2021-08-15T10:43:54.927Z",
            "updatedAt": "2021-08-15T10:47:00.353Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        },
        {
            "actions": " [\n    {\n        \"key\": \"GET_ENTRIES\",\n        \"description\": \"get timesheets entries for specific job\",\n        \"name\": \"get entries\",\n        \"condition\": \"function(context){ return true; }\",\n        \"inputs\": [\n            {\n                \"name\": \"recordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordParentId\"\n            },\n            {\n                \"name\": \"loadSubrecords\",\n                \"source\": \"hard-coded\",\n                \"value\": \"true\"\n            },\n            {\n                \"name\": \"subrecordId\",\n                \"source\": \"trigger-config\",\n                \"value\": \"getSubrecordRecordId\"\n            },\n            {\n                \"name\": \"ignoreLimits\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            },\n            {\n                \"name\": \"responseType\",\n                \"source\": \"hard-coded\",\n                \"value\": \"iov\"\n            },\n            {\n                \"name\": \"entryIds\",\n                \"source\": \"function\",\n                \"value\": \"function(context){ return [`${context.metaData.triggerInputs.entryId}`]; }\"\n            }\n        ]\n    },\n    {\n        \"key\": \"UPDATE_BULK_ENTRIES\",\n        \"description\": \"Update Field Values of tasks\",\n        \"name\": \"Update values\",\n        \"inputs\": [\n            {\n                \"name\": \"values\",\n                \"source\": \"trigger-config\",\n                \"value\": \"bulkEntryValues\"\n\n            },\n            {\n                \"name\": \"mapInternalIdToFieldId\",\n                \"source\": \"hard-coded\",\n                \"value\": true\n            }\n        ]\n    }\n]",
            "name": "[GENERIC] GET SUBRECORDS, UPDATE ENTRIES",
            "custom": "false",
            "recordValueId": 153048,
            "createdAt": "2021-08-10T10:19:58.473Z",
            "updatedAt": "2021-08-10T12:46:34.662Z",
            "autoId": null,
            "autoIdNum": null,
            "internalOwner": 131,
            "formId": -1,
            "recordId": 7658
        }
    ]
}